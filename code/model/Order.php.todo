<?php

/**
 * @description: The order class is a databound object for handling Orders within SilverStripe.
   Note that it works closely with the ShoppingCart class, which accompanies the Order
 * until it has been paid for / confirmed by the user.
 *  *
   CO TENTS:
 * --- ------------------------------------------
 * 1. C S STUFF
 * 2. MA N TRANSITION FUNCTIONS:
 * 3. STA US RELATED FUNCTIONS / SHORTCUTS
 * 4. LINK NG ORDER WITH MEMBER AND ADDRESS
 * 5. CUSTO ER COMMUNICATION
 * 6. ITEM M NAGEMENT
 * 7. CRUD ME HODS (e.g. canView, canEdit, canDelete, etc...)
 * 8. GET METH DS (e.g. Total, SubTotal, Title, etc...)
 * 9. TEMPLATE  ELATED STUFF
 * 10. STANDARD  S METHODS (requireDefaultRecords, onBeforeDelete, etc...)
 * 11. DEBUG
 *  * @authors: N col as [at] Sunny Side Up .co.nz
 * @package: ecomme ce
 * @sub-package: mod l
 * @inspiration: Silv rstripe Ltd, Jeremy
 *
 * NOTE: This is t e S L for selecting orders in sequence of
 *
 **/

class Order ext nds DataObject {

	/**
	 * API Control
	    * @va     Array
	 */
	pr     ate static $ap     acce    s = array(
		'view' => array(
			'Or        rEmail',
			'Email            k',
			'PrintLi            ,
			'Retrieve            k',
			'Title'            			'Total',
			'S            otal',
			            talPaid',
            'TotalOutstan            g',
			'Exchan            ate',
			'CurrencyUse
			'TotalItems',            		'TotalItemsTime            antity',
			'Is            celled',
			'Country' ,
			            llNameCountry',
            'IsSubmitted'            		'CustomerStatus',
            'CanHaveShipping            ress',
			'Cancelle            ',
			'CurrencyUsed',
			'            lingAddress',
		            seShippingAddress            			'ShippingAddress            			'Status',
			'Attrib            s',
			'OrderStatusL            ',
			'Memb            D'
		)
	);

            *
	 * standard SS va            ble
	 * @var        rra
	 */    	priva      static $db = array(
		'     ssionID' => "V     char    32)", //so that in the future        e can link sessions with Orders.... One session can have several orders, but an order can onnly have one session
		'UseShippingAddress' => 'Boolean',
		'CustomerOrderNo        ' => 'Text',
		'ExchangeRate' => 'Do        le'
	);

	private static $has_        e = array(
		'Member' => 'Me    ber',
    	'BillingAddress' => 'BillingAddre        ',
		'ShippingAddress'          'ShippingAddress',
		'Status' => 'Orde        tep',
		'CancelledBy' => 'Member',
		'Cu        encyUsed' => 'EcommerceCur        ncy'
	);

	/**
	 * standa         SS variable
	 * @var Array
	 */
	pri    ate st    tic $     s_many = array(
		'Attri     tes' => 'Order     trib    te',
		'OrderStatusLogs' => 'OrderS        tusLog',
		'Payments' => 'Ecommerce        yment',
		'Emails' => 'OrderEmailRecord'        	);

	/**
	 * standard SS variabl
	 * @var Array
	 */
	private     tatic     index      = array(
		"SessionID"       true
	);

	     *
	      standard SS variable
	 * @var Str        g
	 */
	private stat    c $def    ult_s     t = "\"LastEdited\" DESC

	/**
	 * st     dard    SS variable
	 * @var Array
	 */
	private static $castin     = ar     y(
		'OrderEmail' => 'Te     ',
		'EmailLin      =>     Text',
		'PrintLink' => 'Text',
	        RetrieveLink' => 'Text',
        'Title' => 'Text',
		'To        l' => 'Currency',
		'Tot        AsMoney' => 'Money',
		'Sub        tal' => 'Currency',
        'SubTotalAsMoney' => 'Mo        y',
		'TotalPaid' => 'Curren        ',
		'TotalPaidAsMoney' =>         oney',
		'TotalOutstanding' =>         urrency',
		'TotalOutstandin        sMoney' => 'Money',
		'HasAltern        iveCurrency' => 'Boolean',
		'Total        ems' => 'Int',
		'TotalItemsTimesQuanti        ' => 'Double',
		'IsCancelled' => 'Boole        ',
		'Country' => 'Varch        (3)', //This is the applicable country f         the order - for tax purposes        etc....
		'FullNameCountry' => 'Varchar',
		'IsSubmitted' => 'Boolean',
		'CustomerStatus' => 'Varcha        ,
		'CanHaveShippingAddress' => '        olean',
	);

	/**
	 * stan        rd SS variable
	 * @var Array
	        /
	private static $create_table_options      array
		'M     QLDatabase' => 'ENGINE=I     oDB'
	);

	/
	 *    standard SS variable
	 * @var String
	 */
	pr        ate static $singular_name = "Order";    		func    ion i     n_singular_name() { retu      _t("Order.ORDE     , "O    der");}

	/**
	 * standard SS variable
        * @var String
	 */
	private static $plural_name = "Orders";
		functio     i18n     lural_name() { return _t     Order.ORDERS",      rder    ");}

	/**
	 * Standard SS variable.
	         @var String
	 */
	private static $description = "A collection of item     that     ogether make up the 'Orde     .  An order can     e pl    ced.";
		public static function reset_modifiers() {self::$modifiers = array();}

	/**
	 * Tells us if an order ne        s to be recalculated
	 * @var Boolean
	 */
	private static $needs_recalc    latin     = false;
		public static function set_needs_recal     lating(){ self::     eeds    recalculating = true;}
		public static functio        get_needs_recalculating(){ return self::$needs_recalculating;}

	/**
	 * Total Items         total items in cart
	 * We start with -1 to easily identify if it has been run before.
	    *
	 *     var integer
	 */
	protected $totalIt     s = null;

	/**
	 * Total Items : total items in cart
	 * We st     t w     h -1 to easily i     ntif     if it has been run before.
	 * @    ar Do     le
	 */
	protected $totalItemsTimesQ     ntity = null;


	public static function get_modifier_forms($cont     ller) {
		user_     ror(    this method has been changed to getModifierForms     the current function has been depreciated", E_USER_ERROR)        	}

	/**
	 * Returns a set of modifier forms for use in the checkout order form,
	 * Controller is optional, because th     orde    Form      s its own default controller.
	 *
	 * This method only returns the For      that should be included outside
	 * the editable table... Forms within it can be     all
	 * from through the modifier itself.
	 *
	 * @param Controller $op     onalController
	 * @param Validator $optionalValidator      * @return ArrayList (ModifierForms) |     ull      **/
	public function getModifierForms(Co     roller $optionalController = null, Vali     tor $optionalValidator = null) {
		$arrayLis     = new    ArrayList();
		$modifiers = $this->Modifiers();
		if($modifiers->count()) {
			foreach($modifiers as $modifier        {
				if($modifier->ShowForm())
					if($form = $modifier->getMod        ierForm($optionalController            optionalValidator)) {
						$form->S                ormInEditableOrderTable = $mo                    r->ShowFormInEditableOrderTable();
						$form->ShowFormOutsideEditableOrderTable =                        fier->ShowFormOutsideEditableOrderTable();
						$form->ModifierName = $modifier->                        ame;
						$arrayList->push($form);
					}
				}
			}
		}
		if( $arrayList->count() ) {                        eturn $arrayList;
		}
		else {
			return nu                        	}
	}



	/**
	 * Thi                    cti                etu             th        Ord        Steps
	 *
	 * @return ArrayL             (OrderSteps)
	 **/        publ         static             ction get_orde        sta    us_option    () {
     return OrderStep::get();
	}

	/**
	 *     ike     he standard byID, but it checks wh     her w     are allowed to view the order.
	 *
	 * @return: Ord         | Null
	 **/
	public sta    ic fu    ction     et_by_id_if_can_view($id) {
		$order = Order::get()->byID($id);
		if($order && $or     r->     nView()){
			if($order->I     ubmit    ed()) {
				// LITTLE HACK TO MAKE SURE WE SHOW THE L        EST INFORMATION!
				$order->tryToF        aliseOrder();
			}
			return $ord
		}
		return null;
	}


	 * returns a Datalist with the submitted order log included                * this allows you to sort the o            rs             their submit dat        .
	         You can retri    ve th    s lis     and then add more to it (e.g. additional filters, additional     oins, etc...)
	 * @param Boolean $onlySubmittedOrders - only      clude Orders that have already been submitted.
	 * @return DataList (Orders)
	 */
	public static functio     get_datalist_of_orders_with_submit_record($onlySubmittedOrders = false){
		$submittedOrderStatu     ogClassName = EcommerceConfig     get(    OrderStatusLog", "order_status_log_class_used_for_submitting_order");
		$list = Order::get()
			        LeftJoin("OrderStatusLog", "\"Order\".\"ID\" = \"OrderStatusLog\".\"OrderID\"")
			->LeftJoin($submittedOrderStatusLogClassName,         "OrderStatusLog\".\"ID            = \"".$submittedOrderStatusLogClassName."\".\"ID\"")
			->Sort("OrderStatusLog.Crea            ", "ASC");
		if($onlySubmittedOrders) {
			$list = $list->Where("\"OrderStatusLog\".\"ClassName\" = '$submittedOrderStatusLogC            sName'");
		}
		else {
			$list = $list-        here("\"OrderStatusLog\".\"C            sName\" = '$submittedOrderStatusLogClassName' OR \"OrderStatusLog\".\"ClassName\" IS NULL");
		}        	ret        n $list;



/*******************************************************
   * 1. CMS STUFF
*******************************************************/
	/*
	 * fields tha     we remove from the parent::getCMSFields object set
	 * @var Array   */
	protected $fieldsAndTabsToBeRemoved = array(
		'MemberID',
		'Attribute    ',
		     essionID',
		'Emails',
		'BillingAddressID',
		'ShippingAddressI     ,
		'UseShippi     Addr    ss',
		'OrderStatusLogs',
		'Payments',
		'O        erDate',
		'E        hangeRate',
		'        rrencyUsedID',        	'StatusID'        		'Currency'
	);

        /**
	 * STANDARD SILVER        RIPE STUFF
	 **/
	priv        e static $summary_fi        ds = array(
	        Title" => "Tit        ",
		"Status.Titl         => "Next Step"
	);        		public stat         function ge    _summary    field     ) {return self::$summary_fields

	/    *
	 * STANDARD SILVERSTRIPE STUFF
	 * @t        o: how to translate t        s?
	 **/
	private static $sear    habl        fields = array(
		'ID' => array(
			'field' => 'NumericField',
			'title' =>     Order     umber'
		),
		'MemberID' => ar     y(
			'field' => 'TextField',
		     filte    ' => 'OrderFilters_MemberAndAddress',
			'ti        e' => 'Customer             ails'
		),
		'Created' => a            y(
			'field' => 'TextField
			        ilter' => 'OrderFilter            roundDateFilter',
			'tit             => 'Date (e.g. Today, 1 jan 2007, or last wee
		),
		//make sure to keep th        item        below, otherwise they             not show in form
		'Stat            D' => array(
			'filter' => 'OrderFilters_Mult            tionsetStatusIDFilter'
		),
		'CancelledByID' => array(
        	'fi        er' => 'OrderFilters_HasBeenCancelled',
			'title' => "Cancelled"
		)



	/**
	 * Determi            which properties on the DataObject are
	 * searchable, an        map         em to their default {@link             mField}
	 * representations. Used for scaffold             a searchform for {@link        ode    Admin}.
     *
	      Some additional logic is included for switching fiel     labels, based on
	 * how generic or specific the field type is.     	 *
	 * Used by {@link SearchContext}.
	 *
	 * @param array $_params
	 * 	'     eld     asses': Associative array of field names as keys and FormField classes as      lues
	 * 	'restrictFields': Numeric array of a     iel     name whitelist
	 * @return FieldLi

	public function scaffol     earchFields($_params = null) {
		$fieldList = parent::scaffoldSearchFields($_params);
		$sta     sOptions = OrderStep::get();
		if($statusOptions && $statusOpt     ns->count()) {
			$cr     tedO    derStatusID = 0;
			$preSelected = array();
			$createdO        erStatus = $statusOptions->First();
			if($createdOrde        tatus) {
				$createdOrderStatusID =        createdOrderStatus->ID;
			}
			$arrayOfStatusOp            ns = clone ($statusOptions->            ("ID", "Title"));
			$arr            fStatusOptionsFinal = array();
			if(count($arra            StatusOptions)) {
				forea                arrayOfStatusOptions as $key => $value) {
					$co             =             er::get()
						->Filter(array("StatusID" => intval($key)))
						->            nt();
					if($count < 1) {
						//do            thing
					}
					else {
						$ar                fStatusOptionsFinal[$key] = $value . " ($count)";

					//we use 100 here                        se if there is such a big list, an additional                        r should be
					if($count >
					}
					                    {
	                    if($key                         eatedOrderStatusID) {
							$preSelected[$key] = $key;
	                    }

				}
			}
			$statusField = new CheckboxSetField("StatusID", "Status", $arrayOfStatusOpti                    nal);
			$statusFiel                    tVa                    preSelec                        			$fieldList->push($statusField);
		                            ieldList->push(new DropdownF                        Can                    dBy                 "C            ell            , array(-1 => "(Any)", 1 => "yes", 0 => "no")));
		return $fieldList;
	}

	/**
	 * @            am String $action - e.g. edit
	 * @retu            String
	 */
	public function CMS        itL        k($action = "") {
		$link = "/admin/sales/Order/EditForm/field/Order/item/".$this->ID."";
		if($action) {
			$l        k = $link . "/".$act    on;
	    }
		r     urn $link;
	}

	/**
	 * STANDARD S     VERSTRIPE STUFF
	      brok    n up into submitted and not (yet) submitted
	        */
	function getCMSFields(){
		$fields = parent::getCMSFields();
		if        this->exists())            			$submitted = $this->IsSubmi        ed(        ? true : false;    			if    $subm     ted) {
				//TODO
				//Having     rouble here, as when you submit the form (for exampl      a pa    ment confirmation)
				//a        the step moves forward, meaning the        ields generated are inc            ect, causing an error
				//"I can't handle sub-URL            f a Form object."                 rated by                 RequestHandler.
				//Therefore we need to try reload the page so that it will be request                the correct URL to generate the correct fields for the current step
				//Or something simi
				//why not check if the URL == $this->CMSEditLink()
				//and only tryToFin                eOrder if this is true....
				if($_SERVER['REQUEST_URI'] == $this->CMSEditLink() || $_SERVER['REQUEST_URI'] == $this->CMSEditLink("edit")) {                		$this->tryToFinaliseOrde
				}
			}
			else {
				$this->init(true);
			                		if($submitted) {
				$this->fieldsAndTabsToBeRemo                ] = "CustomerOrderNote";
			}
			else {
				$this->fieldsAndTabsToBeRemoved[] = "Emails";
			}
			foreach($t                    fieldsAndTabsToBeRemoved as $f                ) {            		$            lds->rem                yName($field);
			}            	$fi            s->insertAfter(
		                w Tab(
					"Next",
					new HeaderField("MyOrderStepHead            , _            Order.CU                TSTATUS", "Current Status")),
					$this->Order            pFi            (),
					new HeaderField("OrderStepNextStepHeader", _t                der.ACTIONNEXTSTEP", "Action Nex            tep             1),
					new LiteralFi                "OrderStep                    tepHeader                    ", "<p><strong>"._t("Order.NEEDTOREFRESH", "If you have made any changes to the orde                    n you will have to refresh                    ave this record to see up-to-date options here.")."</strong></p>"),
					new LiteralField("Actio                    StepManually", "<br /><br /><br /><h3>"._t("Order.MANUALSTATUSCHANGE", "Manual Status Change")."</h3>")
					//SEE: $this->MyStep()->addOrderStepFields($fields, $this); BELOW
				),
				"Main"
			);
			if($submitted) {
				$isThem                    led = Config::inst()->get('SSViewer', 'theme_enabled');
				if(!$isThemeEnabled) {
					Config::inst()->update('SSViewer', 'theme_en                    ', true);
				}
				$htmlSummary = $this->renderWith("Order");
		                (!$i                meEnable            {
		            Config::inst()->up                ('SSViewer', 'theme_enabled', false);
				}

				$fields->addFieldT                ('Root.Main', new Litera                    d('MainDetails', '<iframe src="'.$this->PrintLink().'" width                0%"                ght="500"></iframe>'));
				$fields->insertA                (
					new Tab(
						"                    s",
						$this->getEmailsTableField()
					),
					"Next"                	);
		                ields->addFieldToTab('Root.Payments',$this->getPaymentsField());
				$fields->addFieldToTab("Root.Payments", new ReadOnlyField("TotalPaid", _t("Ord                OTALPAID", "Total Paid"                    his->getTo                        d()));
				                        s->addFieldToTab("Root.Payment                    ew R                    lyField(                alOu                nding", _t("Order.TOTALOUTSTANDING", "Total Outstanding"), $this->ge                alOutstanding()));
				if($this->canPay()) {
					$link = EcommercePaymentController::make_payment_link($this->ID);
					$js = "wind                pen(this.href, 'payment', 'toolbar=0,scrollbars=1,location=1,statusbar=1,menubar=0,resizable=1,width=800,height=600'); return false;";
					$header = _t("Order.MA                YMENT", "make payment")                    		$label = _t("Order.MAKEADDITIONALPAYMENTNOW", "make additional pa                     now");
					$linkHTML = '<a href="'.$link.'" onclick="'.$js.'">'.$label.'</a>';
					$fields->addFieldToTab("Root.Payments", new HeaderField("MakeAdd                    alPaymentHeader", $header, 3));
					$fields->addFie                    ab("Root.Payments", new LiteralField("MakeAdditionalPayment", $linkHTML));
				                    		//member
				$member = $this->Member();
				if($member && $member-                    ts()) {
					$fields->addFieldToTab('Root.Account', new LiteralField("MemberDetails", $member->getEcom                    FieldsForCMS()));
				}
				else {
					$fields->addFieldToTab('Root.Customer', new LiteralFie                Mem                etails",
	                	"<p>"._t("Order.NO_ACCOUNT"                ere is no account associated with th                    der")."</p>"
					));
				}
				$cancelledField = $fields->dataFieldByName("CancelledByID");
				$fields->remo                Nam                ancelled                    );
				$fields->addFieldToTab("Root.Cancellation", $cancelledField);
				$                        ->addFieldToTab('Root.Log', $this->getOrderStatusLogsTableField_Archived());
				$subm                    nLog                 his                bmissionLog();
				if($submissionLog) {
					$fields->addFiel                ab('Root.Log',
						new ReadonlyField(
                			'SequentialOrderNumber',
							_t("Order.SEQUENTIALORDERNUM                , "Sequential order number for submitted orders (e.g. 1,2,3,4,5...)"),
							$submis                Log->SequentialOrderNumber
						)
					)                			}
			}
			else {
                    linkText = _t(
					"Order.LOAD_THIS                        ",
					"load this o                            				);
				$message = _t(                            Order.NOSUBMITTEDYET",
					"No details are shown here as this order has not been submitted yet. You can                             to submit it... NOTE: For this, you wil                        ogg                     as                 cus            er              logged                 as (shop)admin ."                    		array("link" => '<a href                    this->RetrieveLink(                 tar                "_blank">'.$link                    '</a>')
				);
				$fiel                    ddFieldToTab('Root.Main', new LiteralField('MainDetails', '<p>'.$message.'</p>'));
				$fields->addFieldToTab('Root.Items',$this->getOrderItemsField());
				$fields->addFieldToTab('Root.Ex                    , $this->getModifierTableField());

				//MEMBER STUFF
				$specialOptionsArray = array(                				                this->MemberID) {
					$specialOptionsArray[0] =  _t("Order.SELECTCUSTOMER", "-- - Remover Cus                r -- -");
					$specialOptionsArray[$this->MemberID] =  _t("Order.L                WITHCURRENTCUSTOMER", "- Leave with current customer: ").$this->Member()->                itle();
				}
	                lseif($currentMember = Member::cu                tUser()) {
					$specia                    onsArray[0] =  _t("Order.SELECTCUSTOMER", "-- - Select Customers -- -");
					$current                    rID = $currentMember->ID;
					$specialOptionsArray[$currentMemberID] = _t("Order.ASSIGNTHISORDERTOME", "- Assign this order to me: ").$current                er-                Title();
				}
				//MEMBER FIELD!!!!!!!
				$me                    rray = $specialOptionsArray + EcommerceRole::list_of_customers();
				$fields->addFiel                    b("Root.Main", new DropdownField("Member                    _t("Order.SELECTCUSTOMER", "Select Customer"), $memberArray),"CustomerOrderNote");
				$memberArray = null;
			}
			$fields->addFie                Tab                ot.Addresses',new Heade                ld("BillingAddressHeader", _t("Order.BILLINGADDRESS", "Billing Address")));
			$fields->addFieldToTab('Root.Addresses',$this->getBillingAddressField());

			if(EcommerceConfig::get("OrderAddress", "use_separate_shipping_add                ")) {
				$fields->add            ldT            b('Root.Addresses',new HeaderField("ShippingAddressHeader", _t("Order.SHIPPINGADDRESS", "Shipping Address")));
				$fields->addFieldTo            ('Root.Addresses',new CheckboxField("UseShippingAddress", _t("Order.USESEPERA            DDRESS", "Use separate shipping address?")));
				if($this->UseShippingAddres
					$fields->addFieldToTab('Root.Addresses',$this->getShippingAddressField());
				}
			}
			$this->MyStep()->addOrderStepFields                elds, $this);
			$fields->addFieldToTab(
				"Root.Next",
				new LiteralField(
					"StatusIDExplanation",
					_t("Order.STATUSIDEXPLANATION",                  can not manually update the stat                     an order.").
					"<br /><br /><a href=\"".$this->CMSEditLink()."\">"._t("O                .RE            SH"            refresh order status")."</a>"
				)
			);
			$curren            s = EcommerceCurrency::ge                st();
			if($c                ncies && $currencie                    unt()) {
				$currencies                    urrencies->map()->toArray();
				$fields->addFieldToTab("Root.Currency", new NumericField                    hangeRate ", _t("Order.EXCHANGERATE", "Exchange Rate")));
				$fields->addFieldToTab("Root.Currency", ne                oku            eld(            rrencyUsedID", _t("Order.CurrencyUsed", "Curre             Used"), $currencies));
			}
			$fields->a                eldToTab("Root.Log", new ReadonlyField("Create                _t("Root.CREATED", "Created")));
			$fields->addFieldToTab("Root.Log", new ReadonlyField("LastEdited", _t("Root.LASTEDIT                 "Last saved")));
		}
		else {
			$fields->removeByName("Main");
			$firstStep = OrderStep::get()->First();
			$msg = _t("Order.V            FIR            TEP", "Start by creating an order - click on the create button ...");
			$fields->addFieldToTab("R            .Next", new LiteralField("VeryFirstStep", "<p>".$msg."</p>"));
			if($firstStep) {
				$fields->addFieldTo        b("        ot.Next"            ew HiddenField("StatusID", $firs            ep->ID, $firstStep->ID));
			}
		}
		$t            ->extend('updateSettingsFields',$fields);
		return $fields;
	}

	/**
	 * Field to add and edit            der Items
	 * @return GridField
	 */
	protected function getOrderItemsField(){
		$gridFie            onfig = GridFieldC                g_RecordEditor::create();
		$source = $this->OrderItems();
		return new GridField("OrderItems", _t            rde        tem        PLURALNAME", "Order Items"), $source , $gridFiel        onfig);
	}

	/*
	 *     ield       add and edit Modifiers
	 * @return G     dField
	 */
	functio     getM    difierTableField(){
		$gridFieldConfig = G        dFieldConfig_RecordEditor::create();
		$source = $this->Modi        ers();
		return new GridField("O        erModifiers", _t("OrderItems.PLURALNAME", "Order Items"), $source , $gridFieldConfig);
	}

	/**
	 *
	 *@r    turn     ridFi     d
	 **/
	protected function getBil     ngAddressField(){
		$     is->    reateOrReturnExistingAddress("Billi        Address");
		$gridFieldConfig = GridFieldConfig::create()->a        Components(
			new GridFieldToo        arHeader(),
			new GridFieldSortableHeader(),
			new GridFieldDataColumns(),
			new GridFieldPaginator(10),
		    new G    idFie     Edi     utton(),
			new Grid     eldDe    ailForm()
		);
		//$source = $this->BillingAd        ess();
		$source = BillingAddress::get()->filter(array("O        erID" => $this->ID));
		return new GridField("BillingAddress",            ("BillingAddress.SINGULARNAME",            illing Address"), $source , $gri            eldConfig);
	}


	/**
	 *             *@return GridField
	 **/
	p            ected function getShippingAd            ssField(){
		$this->CreateO        etur        xistingAddress("ShippingAddress");
		$        idFieldConfig = GridFieldConfig::create()->addComponents(
			new GridFiel        oolbarHeader(),
			new GridFieldSortableHeader(),
			new GridFieldDataColumns(),
			new GridFieldPaginator(10),
			new G    idField    ditBu     on(
			new GridFieldDet     lForm    )
		);
		//$source = $this->ShippingAddress();        		$source = ShippingAddress::get()->filter(array("OrderID"        > $this->ID));
		return new GridField("ShippingAddress", _t("B            ingAddress.SINGULARNAME", "Ship            g Address"), $source , $gridFiel            nfig);
	}

	/**
	 *
	 * @            urn GridField
	 */
	function            tOldOrderStatusLogsField(){
            eprecation::notice('3.0', '        e or        r::getOrderStatusLogsTableField instead        );
		return $this->getOrderStatusLogsTableField();
	}

	/**
	 *
	 * @        turn GridField
	 * @deprecated
	 */
	function OrderStatusLogsTable($sourceClass = "OrderStatusLog", $title = "", FieldList     field    ist =     ull     FieldList $detailedFo     Fiel    s = null){
		Deprecation::notice('3.0',         se order::getOrderStatusLogsTableField instead.');
		return $this->getOrderStatus        gsTableField($sourceClass, $title, $fieldList,     detai    edFor     iel     );
	}

	/**
	 * Ne     s to be public      caus     the OrderStep::getCMSFIelds accesses it.
	 * @param String $sourceClass
	 * @param String $title
	 * @param FieldList $fieldList (Optional)
	         @param FieldList $detailedFormFields (Optional)
	 *
	 * @return GridField
	 **
	public function getOrderStatusLogsTableField($sourceClass = "OrderStatusLog", $title = "", FieldLi    t $fi    ldLis     = null, FieldList $detailedFormFields = null) {
		$gridFieldConfig = Gr     FieldConfig_RecordViewer::crea     ()->addComponents(
			ne     GridFieldAddNewButton('toolbar-header-righ     ),
			new GridFieldDetailForm()
		);
		$title ? $     tle      $title = _t("OrderSt     usLog    PLURALNAME", "Order Status Logs");
		$source = $this->OrderStatusLogs()->Filter(array("ClassName" => $sourceClass));
		$gf = new GridField($sourceClass, $title,        source , $gridFieldConfig);
		$gf->setModelClass($sourceClass);
		return $
	}

	/**
	 * @param String $sourceClass
	 * @pa             String $title
	 * @param F        ldLi         $fieldList (Optional)
	 * @param FieldList $detailedFormFields (Optional)
	 *
	         @return GridField
	 **/
	protected function getOrderStatusLogsTableField_Archiv        ($sourceClass = "OrderStatusLog", $title = "", FieldList $fieldList = nu        , FieldList $detailedFormFields = n        l) {
		$gridF    eldCo    fig =     ridFieldConfig_RecordViewer::c     ate()->addComponents(
		     ew GridFieldDetailForm()
		);
		$title ?      itle : $title = _t("OrderItem.PLURALNAME", "Order L     ");     	$source = $this->Ord     Statu    Logs();
		return new GridField($sourceClass, $title, $source , $gridFieldConfig);
	}

	/**
	 *
	 * @return GridField
	 **/
	public function getEmailsTableField() {
	        gridFieldConfig = GridFieldConfig_RecordViewer::create()->addComponents(
		            w GridFieldDetailForm()
		)
		r        urn new GridField("Emails", _t("Order.CUSTOMER_EMAILS", "Customer Ema        s"), $this->Emails(), $gridFieldConfi        ;
	}

	/**
	 *
	 * @return GridField
	 */
	protected function getPa    ments    ield(
		     ridFieldConfig = Grid     eldCo    fig_RecordViewer::create()->addComponents        			new GridFieldDetailForm(),
			new GridFieldEditButton()
		);
		return              GridField("Payments", _t("        der.        YMENTS", "Payments"), $this->Payments(), $gridFieldConfig);
	}

	/**
	 * @return OrderStepField
	 */
	function     rderS    epFie     ()      		return OrderStepFie     ::cr    ate($name = "MyOrderStep", $this, Member        currentUser());
	}






/******************************************            **********
   * 2. MAIN TRAN            ION FUNCTIONS
*************        ****        **********************************/

	/**
	 * init runs on start of a new Order (@see onAfterWrite)
	 *    it ad    s all     he modifiers to the orders     nd t    e starting OrderStep
	 *
	 *        param Boolean $recalculate
	 * @return DataObject (Order)
	 **/
	public function in    t($recalculate = false) {
		//to do: check if shop is open....
		if($thi   StatusID || $recalculate) {
			if(!$this->StatusID) {
				$createdOrderStatus = OrderStep::    et()-     irst();
				$this->StatusID = $createdOrderStatus->ID;
	     }
			$createdModifiersClassNames = array();
			$modifiersAsArrayList      new     rrayList();
			$modifiers = $th     ->modifiersFromDatabase($inclu     ngRem    ved = true);
			if($modifiers->count()) {
			        oreach($modifiers as $modifier) {
		        	$modifiersAsArrayList->push($modifier)            			}
			}
			if($modifi                sArrayList->count()) {
				foreach($modifiersAsArr                st as $modifier) {
					$createdModifiersCla            ame            modifier->ID] = $modifier->ClassName;

			}
			else {

			}
			$modifiersToA            = EcommerceConfig::get("Order", "modifiers");
			if(is_array($modifier            Add) && count($modifiersToA                > 0) {
				foreach($modifiersToAdd a                    mericKey => $className) {
					if(!in_arr                cla            ame            createdModifiersClassNames)) {
						i                ass_exists($className)) {
							$modifier = ne                    assName();
							//only add the ones that should be added automatic
		            		i            $modifier-            Not            Automatically()) {
								if(is_a($modifier, "OrderModifier"))
									$modifier->OrderID = $this->ID;
									$modifier->                 = $numericKey;
									//init method includes a WRITE
                    				$modifier->init();
									//IMPORTANT - add as has_m                        lationship  (Attributes can be a                            er OR an OrderItem)
									$t                            tributes()->add($modifier);
									$modifiersAsArrayLi                            h($modifier);
								}
							}
						}                                lse{
							user_error("reference to a no                                    g class: ".$className." in modifi                                    SER_NOTICE);
						}
					}

			$this->extend('onInit', $thi                                    /careful - this will                                    AfterWrite" again
			$this->write();
		}
		return $this;
	}


	/**
	 * Goes through t                                    steps and tries to "apply" the next st                                    he order.
	 *
	 **/
	public function tr                                ise                             {
                        thi                        celledB                            			return;
		}
		do {
			//status of order is being progressed
			$nextStatusID = $this->do                        atu                    			                lit             ha            to make sure we do not rely on a             red value
			//of "isSubmitted"
			$this->isSubm            edTempVar = -1;

		        ile ($nextStatu    ID);
	}

	/
	 * Goes through the order steps and tries to "apply" the next
	 * @return Intege     (St     usID     r false if the next status can not be "a        lied")
	 **/
	public functi            doNextSta        s()
		if(            is->MyStep()->initStep($this)) {
			if(            is->MyStep()->doStep($this)) {
				if($n            OrderStepObject = $this->MyStep()->nextStep($this)) {
					$thi            StatusID = $nextOrde            epObject->ID;
					$this->write()
		        	return $this->StatusID;    				}    			}
     }
		return 0;
	}

	/**
	 * cancel an order.
	 * @param Me     er $member - the user cancelling the order
	 * @param String $reason - the reas      the     rder is cancelled
	 * @returns Ord        StatusLog_Cancel
	 */
	public function             cel(Member $member, $reason = "") {
		                s->CancelledByID = $member->ID;
		$this->write();
		$log = Ord                    tusLog_Cancel::create();
		$log->AuthorID = $                    r->ID;
		$log->Or                     = $this->ID;
		$log->Not                $re            n;
        if(        ember->IsSh    pAdmi    ()) {     		$log->InternalUseO     y = true;
		}
		return $log->write();
	}






     *******************************************************
   * 3     STATUS RELATED FUNCTIONS / SHORTCU
***    ***************************************************/

	        *
	 * @return DataObject (current Ord        Step)
	 */
	publ         function MyStep() {
		$step = null;
		i        $this->StatusID) {
			$step = O        erStep::get()->byID($this->S        tusID);
		}
		if(!$ste         {
			$step = OrderStep::get()            irst(); //TODO: this could prod        e s        ange results
		}
		if(    $step) {
			$step = OrderStep_Created::create();
		}
		return $step;
	}   	/**
	 * @return OrderStatusLog
	 */
	public function RelevantLogEntry(){
		return $this->MyStep()->R    levan     ogEntry($this);
	}

	/**
	 * @return Da     Obje    t (current OrderStep that ca        be seen by cust        er)
	 */
	public funct             CurrentStepVisibleToCustomer() {
		$obj = $this->        Ste        );
		if($obj->            eStepFromCustomer) {
			$obj = OrderStep::get()->where("\"OrderStep\".\"Sort\"         ".$        j->Sort." AND             ideStepFromCustomer\" = 0")->First();
        	if        $obj) {
				$ob     = Or    erSte     :get()->First();
			}
		}     		re    urn $obj;
	}

	/**
	 * works out i        the order is still at the first OrderStep.
	 * @re    urn b    olean      */
	public function IsFirstStep() {
		$firstStep = OrderStep::get()->     rst(    ;
		$currentStep = $this->MyStep();
		if($firstSt         && $currentStep) {
			if        firstStep->ID == $currentStep->ID)            				return true;
			}
		}
		return false;
	}

	/**
	 * Is the order still being "edited" by the customer?
	 * @            urn boolean

	function IsInCart(){
		return (b            )$t        s->        Submitted();


	/    *
	 *     he order has "passed" the IsInCart phase
	 * @return boolea
	 */
	function Is     stCa    t(){
		return (bool) !$this->IsIn        rt();
	}

	/**
	* Are there still step        the order needs to go through?
	         @return boolean
	 */
	function Is            omplete() {
		return (bool)$this->MyStep()                owAsUncomplete            der        	}
        	/**
	* Is the     rder     n the     "processing" phaase.?
	 * @return boolean
	 */
	func     on IsProcessing() {     	ret    rn (bool)$this->MyStep        ->ShowAsInProcessOrder;
	}

	/**
    * Is     he or     r completed?
	 * @return boolean
	 */
	func     on IsCompleted() {
     retu    n (bool)$this->MyStep()-        howAsCompletedOrder;
	}

	/**
	      Has     he or    er been paid?
	 * TODO: why do we check if there is a to     l at all?
	 * @retu      boo    ean
	 */
	function IsPaid(        {
		if($this->IsSubmitted()) {
			return (bool)( ($thi    ->Tot    l() >     0) && ($this->TotalOutstanding() <= 0));
		}     	return false;
	}
     /**
	    * Has the order been cancel        d?
	 * @return boolean
	 */
	public function IsCanc    lled(     {ret    rn $this->getIsCancelled();     	public function ge     sCan    elled() {
		return $this->        ncelledByID ? TRUE : FALSE;
	}

	/**
	 * Has the o    der b    en ca     elled by the customer?
	 * @     turn boolean
	 */
	function IsCustomerCancelled() {     	if($this->MemberID      0 &&    $this->MemberID == $t        s->IsCancelledID) {
			retur            rue;
		}
		return false;
	}


	/**
	 * Has the order been cancelled by        he         dministrator?
	    * @re    urn b     lean
	 */
	function IsAdminCance     ed() {
		if($this->     Canc    lled()) {
			if(!$this->IsCustomerCancelled()) {
				$admin = Me    ber::get()->byID($this->CancelledByI        ;
				if($admin) {
					if($admin->IsShopAdm    n())
				     return true;
					}
				}
			}
		}
		return f     se;
	}


	/**
	     Is t    e Shop Closed for business?
	 * @r        urn boolean
	 */
	function ShopClosed() {
		return EcomConfig()->Sho            osed;
	}







/*********    *******    *****     ******************************
   * 4. LINKING ORDER WI      MEMBER AND ADDRESS     ****    *******************************        ****************/


	/**
             Returns a member linked to the order                * If a member is already linked, it will return the e                ing member.
	                     erwise it will return a new M
	 *
	 * Any                     emb                s N            wri        en,        ecause we dont     ant to     reate    a new member unless we have to!
	 *       will not add a mem     r to    the order unless a new on        is created in the checkout
	 * OR     he member is logged in / logs in.
	 *
	 * Also note that if a new member is cr   ed, it is not automatically written
	 *
	 * @param Boolean $forceCreation - if set to true then the membe     will     lways be saved in the database.
	 * @retu      Member
	 **/
	public function CreateOrReturnExistingMember($forceCre     ion = false) {
		if($this->MemberID) {
		     mem     r = $this->Member();
		}
		elseif($member = Member::currentUser()) {
			if(!$member->IsShopAdmi     )) {
				$this->MemberID = $member->ID;
				$this->write();
			}
		}
		$member =      his->Member();
		if(!$member) {
			$memb      =      w Member();
		}
		if($member && $forceCreation) {
			$member->write();
		}     	ret     n $member;
	}

	/**
	 * Returns either the existing one or a new Order Address...
	 * All Orders wil     have a Shipping an     Billi    g address attached to it.
	 * Method used to retrieve object e.g. for $o        er->BillingAddress(); "            lingAddress" is the method n        e y         can use.
	 * If the method name is the sam            s the class name then dont worr                out providing one.
	 *
	 * @par                tring $className              Cl        sNa         of the Address (e.g. Billin        ddress or Shippi            ddress)
	 * @param String        alt        nativeMethodName  - method to ret            ve Address
	 *
	 *        ret        n Null | OrderAdd    ess
	    **/
     public function CreateOrReturnExistingAddress($className = "Bi     ingAddress", $alternativeMethodName = '') {
		if($this->exists()) {
		     variableName = $className."ID";
			$methodName = $className;
			if($alternativeMethodName) {
				$methodName = $alte     ativeMethodName;
			}
			$address = null;
			if($this->$variableName) {
				$address =     thi     >$methodName();
			}
			if(!$address) {
				$address = new $className();
				if($member = $this     CreateOrReturnExistingMember()) {
					if($member->exists()) {
						     ddr     s->FillWithLastAddressFromMembe     $member     $write = false);
					}
				}
			}
			if($address) {
				if(!$address->exists()) {
					$address->write        ;
				}
				if($addres            OrderID != $this->ID) {
					$addr            ->OrderID = $this->ID;
				            ddress->write();
				}
				if                is->$variableName != $address->ID){
			            f(!            is->IsSubmitted())            						$this->$variableName =                dress->ID;
						$this->write();
            		}            		}
				return $a                ss;
			}
		}
		return null;

	/**
	 * Sets the country in the billing and shippin                    ress
	 * TO DO: only set                          the other....
	 * @param String $countryCode - code for the countr                    . N                **/            ubl            function SetCoun                ields($countryCode) {
		if(                    ingAddress = $this->                teO                urnExistingAddress("BillingAddress"))                     $billingAddress->SetCountryField                    untryCode);
		}
		i                omm                Config::get("OrderAddress", "use_separate_s                    ng_address")) {
			if($shippi                        ess = $this->CreateOrReturnExistingAdd                        ShippingAddress")                    			                ppi                dress->SetCountryF            ds(        oun        yCode);
			}
    	}
	}

	/
	 * Sets the region in the billing and shipping address     	 * @param Integer $regionID - ID for th     region to be set
	 **/
	public function SetRegionFields($reg     nID)
		if($billingAddress = $this->CreateOrReturnExist        gAddress("BillingAddress")) {
			$billingAddress->SetRegionFields($regionID);

		if($this->CanHaveShippingAddress()) {
			if($s        ppi        Address = $this->CreateOrReturnExistingAddress("ShippingAddress")) {
				$shi            ngAddress->SetRegionFields($regionID);
			}
		}
	}

	/**
	 * Stores the prefe                 currency of the order.
	 * IMPORTANTLY we store th            xch        ge     ate f    r fut     e reference...
	 * @param EcommerceCurrency $currency
     */
	public function UpdateCurrency($newCurrency) {
		if($     is->I    Submitted()) {
			user_error("Can not set the         change rate after the order has been submitted", E_USER_NOTICE);
		}
		else {
            if(!is_a($newCurrency, Object::getCustomClass(        com        rceCurrency"))) {
				$currency = Ecomm            eCurrency::default_currency();
			}
			$this->CurrencyUsedID = $newCurrency->ID;                $this->ExchangeRate = $newCurrency->getExchangeR            ();        		$    his->    rite(     
		}
	}

	/**
	 * alias for UpdateCurrency      */
	public function SetCurrency($currency) {
		$this->UpdateCurre     y($currency);
	}




/***********     ****    *************************************
   * 5. CU        OMER COMMUNICATION
*********            *******************************************/

	/**
	 * Send the invoice of the order by email.        	 *         * @para            tring $subject - subject for the email
	 * @param String $message - the                  message in the email
	 * @param Boolean $resend - s             th            mail even if it has been sent before
	 * @p            m Boolean $adminOnly - do not send to customer, only se            to shop admin
	 *        par    m Str    ng $e     ilClassName - class used to      nd e    ail
	 * @return Boolean TRUE on success, F        SE on failure (in theory)
	 */
	fu    ction sendEmail($subject = "", $message = "", $resend = false, $admin   y = false, $emailClassName = 'Order_InvoiceEmail') {
		return $this->prepareEmail($emailC    assNa     , $subject, $message, $resend, $adminOnly);     }
     /**
	 * Sends a message to the shop admin ONLY and      t to the customer
	 * This can be used by ordersteps and o     erlogs to notify the admin of any potential problems.
	 *
	 * @param Strin     $subject - subject for the email
	 * @param String $message - message to be adde     with the email
	 * @return Boolean TRUE for success, FALSE f      failure (not tested)
	 */
	public function sendError($subject =     ", $    essage = "") {
		return $this->prepareEmail('Order_ErrorEmail', _t("Order.ERROR", "ERROR")." ".$subject, $message, $resend = true        $adminOnly = true);
	}

	/**
	 * Sends a message to the shop admin ONLY and not to t    e cus    omer
     * This can be used by ordersteps and orderlogs to notify the admin     f any potential problems.
	 *
	 * @param String $subject - subject for the email
	 * @param S     ing     message - message to be added with the email
	 * @     turn Boolean TRUE for success, FALSE for failure (not tested)
	     /
	public function sendAdminNotification($subject = "", $message = "      {
	    return $this->prepareEmail('Order_ErrorEmail', $subject, $m        sage, $resend = false, $adminOnly = true);
	}

	/**
	 * Send a mail of the order to the client (and another to the admin).
	 *
	 *    @para     Stri      $emailClassName - the class name of the email you wish to send
	      @param String $subject - email subject
	 * @param Boolean $copyToAdmin - true by default, wheth      it     hould send a copy to the admin
	 * @param Boolean      esend - sends the email even it has been sent before.
	 * @para     Boolean $adminOnly - sends the email to the ADMIN ONLY.
	 *
	 * @re     rn B    olean TRUE for success, FALSE for failure (not tested)
	 */
	protected        unction prepareEmail($emailClassName, $subject, $message, $resend = false, $adminOnly = false) {
		$array    ata =    $this     createReplacementArrayForEmail($message, $subject);
 		$from = Order_E     il:     et_from_email();
 		//why are we using this email and NOT the member.EMAIL?
 		     for historical reasons????
		if($adminOnly     {
			$to = Order_Email::get_from_email();
		}
		else {
			$to = $this->getOrderEmail();

 		if($from && $to) {
			$email = new $emailClassName();
			if(!(is_a($     ail, Object::getCustomClass("Email")))) {
				user_error("No corre      em     l class provided.", E_USER_ERROR);
			}
			$email->setFrom($from);     		$em    il->setTo($to);
			//we take the subject from the Array Data, just in case it has been adjusted.
			$email->        tSubject($arrayData->getField("Subject"));
			//we also see if a CC and a         C have been added
			;
			if($cc = $arr         ata->getField("CC")) {
				$email->setCc($cc);
			}
			         $bcc = $arrayData->getField("B        ")) {
				$email->            Bcc($bcc);
			}
			$email->populateTe        lat        $arrayDa            ;
			// This might be called fr         wi         n the CMS,
			// so             need to restore the theme, just i            ase
			// templates within the theme exist
			$oldTheme                onfig::inst()->get('SSViewer', 'theme');
			Config::inst()->upd            ('S            ewer', 'theme', Config::i            ()->get('SSViewer', '            me_enabled') ? Config::inst()->get('SSViewer', 'theme') : null);
			$email->set            er($this);
			$email->setResend($resend);
			$result             email->send(null);
			SSViewer::current_theme($ol            eme            			return $result;
		}
		return false;

	/**
	 * returns t            Dat            hat can be used in the body of an order Em                	 * we add the subject             e s            hat the subject, for example, can be ad             to the <title>
	 * of the email template.
	             e add the subject here so that the subject, for ex            le, can be added to the <title>
	 * o            he email template.
	 * @param String $message - the add            onal message
	 * @param String $subject - subject for email -
	 * @return ArrayData
	 * - Subject - EmailSubject
	 * - Message - specific messa            for this order
	 * - Order            pMessage - generic message fo            tep
	 * - Order
	 * - EmailLog            	 * - ShopPhysicalAddress
	 * - Curre            ateAndTime
	 * -         seU
	 * - CC
	 *      BCC
     */
	     blic function createReplacementArrayForEmail($message = "", $subjec     = ""){
		$step = $this->MyStep();
		$config = $this->EcomConfig();
		$replacementArray      array();
		if($subject) {     		$replacementArray["Subject"] = $subject;
		}
		else {
			$replacementArray["Subject"]      $step->EmailSubject;
		}
     	$replacementArray["To"] = "";
 		$replacementArray     CC"] = "";
 		$replacementArray["BCC"] = "";
 	     replacementArray["Mes     ge"] = $message;
 		$replace     ntArray["OrderStepMessage"] = $step->CustomerMe     age;
		$replacementArray["Order"] = $this;
		$re     acementArra     "EmailLogo"] =      onfig->EmailLogo();
		$re     acementArray["ShopPhysic     Address"] = $     nfig->Sh     PhysicalA     ress
		$replacementArray["CurrentDateAndTime"] = DBField::create_field('SS_Datetime         "Now");
		$replacementArr        ["BaseURL"] = Director::baseURL(
		$arrayData = new ArrayData(        eplacementArray)            	$this->extend('updateReplacementArrayForE        il'        $arrayDa            ;
		return $arrayData;
	}

	/**
	 * returns the o        er          matted as an email
	 * @param S         ng $message - the additional me         ge
	 * @param String $emailClass         e - template to use.
	 * @return array (Me         ge, Order, EmailLogo, ShopPhysicalAddress)
	 */
	public function        enderOrderInEmailFormat($message = ""        $emailClassName) {
		$arrayData = $this->createReplaceme        ArrayForEmail($message);
		$isThemeEnabled = Config::inst()->get('SSViewer         'theme_enabled');
		if(!$isThemeEnabled) {
			Config::inst()->update('SSViewer', 'them        enabled', true);
		}
		$html = $arrayData->renderWit        $emailClassName);
		if(!$isThemeEnabled) {
			C        fig::inst()->update('SSViewer', 'theme_enabled', false);
		}
        return Order_Email::    mogri    y_htm     $html);
	}








/**************     ***************************************
   * 6. ITE     MANAGEMENT
*****************************************     ************/

	/**
	 * returns a list of Order Attributes by ty
	 *
	 * @param Array | String $types
	 * @return ArrayList
	 */
	function ge        rderAttributesByType($types){
		if(!is_array($types) && is_stri        ($types)){
			$types = array($types);
		}
		if(!is_array($al)) {
	        user_error("wrong parame             (types) provided in Order::getOrderAttributesByTypes");
		}        		$         = new ArrayList();
		$items = $this->Items();
		        reach($items as $item) {            	if(in_array($item->OrderAttributeType(), $types)){
				$al->        sh(        tem);
			}
		}
		$modifiers = $this->Modi    iers();
		foreach($modifiers as $modifier) {
			if(in_array($modifier->Order   ributeType(), $types)){
				$al->push($modifier);
			}
		}
		return $al;
	}
    	/**
	      Returns the items of the order.
	 * Items are     he      der items (products) and NOT the     odifiers (discount, t     , et    ...)
	 * @param String filter - where statem        t to exclude certain items OR ClassName (e.g.            axModifier')
	 * @return         taL        t (OrderItems)
	 */
	            ction Items($filterOrClassName = "") {
 		if(!$this->exists()){
 			$this->write();        	}
	        eturn $this->itemsFromDa        base($filterOrClassName);


	/**
	 * @alias function             Items
	 * @param String filter - where statement to                lude certain items.            * @        tur        DataList (OrderItems)
	 */
	funct        n OrderItems($filterOrClassName = ""
		return $this->Items($filterOrClassName);
	}

	/**                 Return all the {@link O            rIt        } i        tances that a    e
	 *    avail     le as records in the database.
	 *      aram String filter - where statement to exclude certain items,
	 *   you can also pass      classname (e.g. MyOrderItem), in which case only this class will be returned (and any class extendin     your given class)
	 * @return Dat     ist     OrderItems)
	 */
	protected function items         mDatabase($filterOrClas             e = "") {
		$clas        ame         "OrderItem";
		$extrafilter = "";
		if($filterOrClas    Name)    {
			     (class_exists($filterOrClass     me)) {
				$className = $filterOrClassName;
			}
			else {
				$e     rafilter = " AND $filterOrClassNa     ";
	    	}
		}
		return $className::get()->where("\"Ord        Attribute\".\"OrderID\" = ".$this->ID." $e    trafi    ter")     	}

	/**
	 * @alias for Modifiers
	 * @return DataLi      (OrderModifiers)
	 */
	public function      derModifiers() {
		return $this->Modifiers();
	}

	/**
	 * Retur      the modifiers of the order, if it hasn't been saved yet
	 * it returns the modifiers from session, if it has, it returns them
	 * from the DB e     ry. ONLY USE OUTSIDE ORDER
	 * @p     am S    ring filter - where statement to exclude certain items OR ClassNa         (e.g. 'TaxModifier')
	 * @        turn DataList (Order        difiers)
	 */
	public fun            on Modifiers($filterOrClassName = '') {
                turn $this->modifiersFromDatabase(            lte            ClassNam                	}

	/**
	 * Get all {@link OrderModifier            nst        ces        hat are
	 * available as records in the database.
	 * NOTE: includes REMOVED Modifiers, so that     hey d     not      t added again...
	 * @pa     m String filter - where statement to      clud     certain items OR ClassName (e.g. 'T        Modifier')
	 * @return DataL    st (O    derMo     fiers)
	 */
	protected function modifiersFromDatabase($filterOrCla     Name = '') {
		$className = "OrderModifier";
		$extrafilter = "";
	     f($filterOrClassName) {
			if(class_exists($f     terOrClassName)) {
				$className = $filterOrClassName;
			}
			else {
				$extrafilter = " AND $f     terOrClassName";
			}
		}
		return      lass    ame::get()->where("\"OrderAttribute\".\"OrderID\" = ".        his->ID." $extrafilter");
	}

	/**
	 * Calculates and u    dates    all t      order attributes.
	 * @param Bool $recalculate - ru     it, even if it has run already
	 *
	 */     public function calculateOrderAttributes($recalculate = false) {
		if($this->     Submitted()) {
			//submitted orders are NEVER recalculated.
			//they are set in stone.
		}
		els     f(Order::get_needs_recalculating() ||     reca    culate) {
			if($this->StatusID || $this->TotalItems()) {
				$this-        alculateOrderItems($recalculate
				$this->calculat        odifiers($recalculate);
		            this->extend("onCalculateOrder");
			}

	}


	/**
	 * Calculates and             ate            ll the p                ct items.
	 * @param Bool $recalculate - ru            t,         en          it has run already
	 */
	public function calculateOrderItems($recalculate = false) {
		//check    if or    er ha     modifiers already
		//check /re-add all non-removabl     ones
		//$start = microtime();
		$orderItems = $this->itemsFromD     aba     ();
    	if($orderItems->count()) {
			foreach($orderItems as $orderItem){        				if($orderItem) {
					$o            rItem->runUpdate($recalculate);
				}
			}            }
		$this->extend("onCalcul        eOr        rItems", $orderItems);
	}



	/**
	 * Calculates and up            es all the modifiers.
	 *
	 * @param Boolean                 alculate - run it, even if it has run alrea                 */
	public function calculateModifiers($r                culate = false) {
		$createdModifier             $t        s->    odifier    FromD     abase();
		if($createdModifiers->count()) {
			f     each($createdModifiers as $modifier){
				if($modifier) {
					$     difi    r->runUpdate($recalculate);
				}
			}
		}
		$this->extend        onCalculateModifiers", $createdModifiers
	}


	/**
	 * Returns the subtotal          the modifiers for this o        er.
	 * If a modifier appears in the exclud        Modifiers array, it is not c            ted.
	 *
	 * @param string|array $ex                ed - Class(es) of                     ier(s) to ignore in the calculation.
	                par            Boo        an         topAtExcludedModifier  - when this flag is TRUE, we st    p adding     he mo     fiers when we reach an excluded modifier.
	 *     	 *     return Float
	 */
	function ModifiersSubTotal($excluded = null, $st     AtEx    ludedModifier = false) {
		$total = 0;
		$modifiers = $this        Modifiers();
		if($modifiers->count()) {
			foreach(        odifiers as $modifier) {
				if(!$            ifier->IsRemoved()) { //we just double-che                his...
					if(is                    y($excluded) && in_array($modifier->C                Nam            $ex        ude        ) {
						if($stopAtExcludedModifier) {
							break;
			    		}
			    		//d     the next modifier
						continue;
					}
					elseif(is     tring($excluded) && ($modifier->ClassName == $excluded)) {
						if($stopAtE     lud     Modifier) {
							break;
						}
						//do the next modifier
						continue;
					}     				$total += $modifier->CalculationTotal();
				}
			}
		}
		return $total;
	}

	/**
	 *
	 * @param string|array $excluded - C     ss(     ) of modifier(s)       ign    re in the calculation.
	 * @param Boolean $stopAtExcludedModifier  - when this fl         is TRUE, we         op adding the modifiers when we re        h an excluded modifier.
	 *             * @return Currency (DB Object)
	 **                function ModifiersSubTotalAsCurrencyObject($excluded = null, $                    tExcludedModifier = false) {
		return DBField::create_field('Currency',$                        ModifiersSubTotal($excluded, $s                            cludedMo                        ));

	/**
	 * @param Stri                        assName: cl                    ame                    the modifier
	 * @return DataObject (OrderModifier)
	 **/
	function R                        eModifier($className) {
		$modi                             $this->                        ers                        if($modifers->count()) {                        reach($modi                     as                    ifier) {
				if(is_a($modifier, Object::ge                tom            ss(        las        ame))) {
					re    urn $    odifi     ;
	     	}
			}
		}
	}


/*******************************************************
   * 7. CR      METHODS (e.g. canView, canEdit, canDelete, etc...)
*******************************************************/

	/**
	 * @param Membe     $me     er
	 * @return DataObject (Membe
	 **
	 //TODO: please comment why we make use of this function
	protected function getMemberForCanFu        tions(Member $member = null) {
		if(!$member) {$member = Member::currentUser();}
		if(!$member) {
			$    ember =    new M     ber();
			$member->ID = 0;
		}
		return $member;
	}
     /**
	 * @param Member $member
	 * @ret     n Boo    ean
	 **/
	public function canCreate($me        er = null) {
		$member = $this->ge        emberForCanFunctions($memb            ;
		$extended = $this->extendedCan('                reate', $member->ID);
		if($extended !== null) {return $ext                    ;}
		if($member->ex                ())            			        tur     $member->IsShopAdmin();
		}
	}

	/**
	 * Standard SS method    an the current member view this order?
	 * @param Member $member
	 * @return Boolean
	 **/
	public function canView($me    ber =     ull) {
		if(!$this->exist     )) {
			return true;
		}
		$m     ber =     this->getMemberForCanFunctions($member);
		//check if thi     has been "altered" in any DataExtension
		$extended = $this->extended        n('canView', $member->ID);
		//if this method has        een extended in             ata object decorator then            e this
		if($exten        d !         null) {
			retur     $ext    nded;     	}
		//is the member is a     hop admin they can      ways     iew it
		if(EcommerceRole::current_member_is_        op_admin($member)) {
			return true;
		}
		//if the        urrent member OWNS the order, (s)he can always view it.
		i        $member->exists() && $this->MemberID == $mem        r->ID) {
			return true;            }
		//it is the current order
		        urr    ntOrd    r = S     ppingCart::current_order();
		if($currentOrder && $currentOrder-     D == $this->ID){
			//we       some additional CH     KS fo     session hackings!
			if($member->exists())
				//must be the same             ber!
				if($t        s->        mberID == $member->ID) {
					return true;
				}
		        //order belongs to another member!
				elseif($this->Memb        ID) {
					return false;
				}
				//order does not bel        g to anyone yet! ADD IT NOW.
				else{
					//we do NOT add the member here,        ecause this is done in sho            ng cart
					//$thi        >Me        erID = $member->ID;
					//$this->write();
					return t        e;
				}
			}
			else{
				//order belongs to someone, bu            urrent user is        OT         gged in...
				if($this->MemberID) {
					return false;
				}
		        //no-one is logged in and order does not belong to anyone
	            else {
					re        rn         ue;
				}
			}
		}
		//i        the session ID matches, we can always view it.
	        /SECURITYL RISK: if you know someone else his/her sess
		//OR you can view the sessions on the server
		//O            ou can guess the session
                THEN you can view the order.                /by viewing the order you can also acc                    ome of the mem                det                .
		//NB: this MUST be the last reso                If all other methods fail.
                    hat is, if we a                ork                with the current order then it is a good idea
		//to                y non-m                    ng members.
		if( $this->SessionID && $this->SessionID == session_id())                     	return true;
		}
		return false;


	/**
	 * @par                    mber $member
	                ret             Bo            an
	 **                function canEdit($member = null) {
		if($this->canView($member) &&                is->MyStep()->CustomerC                    t) {
			return                 ;
	                		$member = $this->getMemberForCanFunctions($member);
		$ex                ed = $th                    xtendedCan('ca                t',            emb        ->I        ;
		if($extended !== null) {return $extended;}

		i        $member && $member->IsShopAdmin()) {
			return true;
		}
        	if(!$this->canView($member) || $this->IsCancel        d()) {
			return false;
		}

        return $this->MyStep()->Customer        nEdit;
	}

	/**
	 * Can a payment be made for this Order?
	 * @param        ember $member
	 * @return Boolean
	 **/
	function canPay(Membe        $member = null) {
		$member = $this->getMemberForCanFunctions($member);
		$        tended = $this->extendedCan('canP        ', $member->ID);
		if($extended !== null) {return $extended;}            	if($this->IsP        d()        | $this->IsCanc    lled())    {
			     turn false;
		}
		return     this->MyStep()->Cus     merCa    Pay;
	}

	/**
	 * Can the given m        ber cancel this order?
	 * @param Member $member
	 * @return Boole
	 **/
	funct        n c        Cancel(Member $member = null) {
		//if it is already         ncelled it can be cancelled again
		if($this->CancelledBy        ) {
			return false;
		}
		$member = $this->        tMemberForCanFunctions($member);
		$exten             = $this->exte        edCan        canCancel', $member->ID);
		if($extended !== null) {retu            $extended;}
		i        $memb         && $member->IsShopAdmin()) {
			return tr    e;

		re     rn $this->MyStep()->CustomerCanCancel;
	}

	/**
	 * @param Membe     $member
	 * @return     oolea
	 **/
	public function canDelete($member         null) {
		$member = $this->getMemberForCanFunctions(        ember);
		$extended = $this->extendedCan('canDelete', $m        ber->ID);
		if($extended !== null) {return $        tended;}
		if($this->IsSubmitted()){
			return            lse;
		}
		els        f($        mber && $member->IsShopAdmin()) {
			retu    n tru    ;
		}     		return false;
	}


	/**
	 * Returns a      the order logs that the      rrent member can vi
	 *     .e. some order logs can only be viewed by the        dmin (e.g. suspected fraud orderlog).
	 *
	 * @return A        ayList (OrderStatusLogs)
	 *
	public functi         Ca        iewOrderStatusLogs() {
		$canViewOrderStatusLogs = ne        ArrayList();
		$logs = $this->OrderStatusLogs();
		foreach        logs as $log) {
			if($log->canView()) {
		        $canViewOrderStatusLogs->push($log);
			}            	}
		return $c        Vie        rderStatusLogs;
	}

	/**
	 * returns all     he logs    that      n be viewed by the custom     .
	 * @return Array     st (O    derStausLogs)
	 */
	function CustomerViewabl        rderStatusLogs() {
		$customerViewableOrderStatusLogs         new ArrayList();
		$logs = $this->OrderStatusLogs();
		if        logs) {
			foreach($logs as $log) {
				if(        log->InternalUseOnly) {
			            customerViewabl        rde        tatusLogs->push($log);
				}
			}
		}
		re            n $customerVie        ble        derStatusLogs;
    }






/*******************************************************
   *       GET METHODS (e.g. Total, SubTotal, Title, etc...)
**************************************     ***     **********/

	/**
	 * returns the ema      to b     used for customer communication
	 * @return        tring
	 */
	function OrderEmail(){return $t        s->getOrderEmail();}
	function getO        erEmail() {
		$email = "";            	if($this->BillingAddre                 && $this->BillingAddress()) {
			$ema            = $        is-        illingAddress()->Email;
		}
		if    !$ema    l) {
     	if($this->MemberID && $this->Member()) {
				$email = $this     Member()->Email;
			}
		}
		$this->e     end(    updateOrderEmail', $email);
		return $email;


	/**
	 * Returns true if there is a prink or emai        link.
	 * @return Boolean
	 */
	f        ction HasPrin            EmailLink(){
		return $thi                mailLink() || $this->PrintLink                    }
	/**
	 * returns the absolute link to the or                tha            an          us         in the customer communication (email)
	 *    @return String
	 */
	function EmailLink($type = "Order_StatusEmail"){return    is->getEmailLink();}
	function getEmailLink($type = "Order_StatusEmail") {
		if(!isset($_REQUEST["print"])) {
			i    ($thi     >IsSubmitted()) {
				return Director::AbsoluteURL(OrderCon     rmationPage::get_e     il_l    nk($this->ID, $this->MyStep()->getEmailClassName(), $ac    uallySendEmail = true));

		}
	}

	/
	 * returns the absolute link to the order for printing
             @return String
	 */
	function PrintLink(        ret        n $this->getPri            ink();}
	function getPrintLink() {
		if(!                t($_REQUEST["print"])) {
			if($th            >Is        bmi        ed()) {
				return Director::AbsoluteURL(Ord        ConfirmationPage    :get_    rder_     nk($this->ID))."?print=1";
			}
		}
	}

	/**
	      returns the absolu      lin     to the order for printing
	 * @r        urn String
	 */
	function PackingSlipLink(){retur     $t    is->g     PackingSlipLink();}
	function getPackingSlipLink() {
		$member = Member::currentUser();
		if($m     ber && $member->Is     opAd    in()) {
			if($this->IsSubmitted() ) {
				return Director::AbsoluteURL(OrderCo    firmationPage::get_order_link($this->ID))."?packingsli        1";
			}
		}
	}


	/**
	 * r            rns the absolute link that t                ustomer can use to retrieve the email WITHOUT logging in.
	 * @todo: is this a security risk?
	 * @return String
	 */
	function RetrieveLink(){            urn        thi    ->get    etrie     Link();}
	function getRetrieveLink() {
		if($this->IsS     mitted()) {
			if(     this    >SessionID) {
				$this->SessionID = session_id();
	    		$this->write();
			}
			        turn Director::AbsoluteURL(OrderCo            rmationPage::find_link())."r                eveorder/".$this->SessionID."/".$this->ID."/";
		}
		else {
			return Director::AbsoluteUR            /sh        pin    cart/    oador     r/".$this->ID."/");
		}
	}

	/**
	 * link to delete     rder.
	 * @return      ring    	 */
	function DeleteLink(){return $this->getDeleteLink();}
	fun    tion getDeleteLink() {
		if($this        canDelete()) {
			return ShoppingC        t_Controller::delete_order_link($this->ID            		}
		else {
			return "";

	}

	/**
	 * link to copy order.
	 * @return String
	 */
	function CopyOrderLink(){return $            s->        tCo    yOrderL    nk();     	function getCopyOrderLink() {
		if($this->canView()) {
			return ShoppingCart_Controller::copy_     der_link($this->ID);
		}
		else {     		return "";
		}


	    **
	 * A "Title" for the order, which summarises the main d    tails (date, and customer) in         string.
	 * @return String
            */
	function Title($dateF                t = "D j M Y, G:i T", $includeName                rue) {return $thi            get            le($dateFormat, $includeName);}
	function getTitle($dateFormat = "D j M Y, G:i T", $includeName = true) {
		if($this->        ist        )) {
			            $submissionLog = $this->SubmissionLog()) {
				$dateObject = $submissionL        ->d    Objec    ('Cre     ed');
				$placed = _t("O     er.PLACED", "place     );
	    	}
			else {
				$dateObject = $this->dbObject('Create    ');
				$placed = _t("Order.        ARTED", "started");
			}
            $title = $this->i18n_singular_name(). " #$this->ID - ".$placed.        ".$        teObject            ormat($dateF        mat    ;
			    name      "";
			if($this->Cancel     dByID) {
				$name      " -    "._t("Order.CANCELLED","CANCELLED");
			}
			if($includeName     {
				$by = _t("Order.BY", "by        ;
				if(!$name) {
				            ($this->BillingAddressID) {
						if($billingAddress = $this-        ill        gAddress             {
							$n        e =    " - "    $by."     .$billingAddress->Prefix." ".$billingAddress->FirstName." ".$billingAddress->Surname;
						}
	     		}
				}
				if(     name)    {
					if($this->MemberID){
						if($member = $this->Member()) {
							if($member->exists()) {
								if($memberName    = $member->getName()) {
									if(!trim($memberName)) {
										$memb        Name = _t("Order.ANONYM            ","anonymous");
									}
									$name = "                 $by." ".$memberName;
								}
							}
						}
	                }
				}
				$title .= $name;
			}
		}            else            			$titl                _t("Order.NEW", "New")." ".$this->i18n_sing                _name();
		}
		$this->extend('updateTitle'            tit            ;
		return $title;
	}



	/**
	 * Returns the subtotal of the items for this order.
	 * @return            oat
	 */
	fu            ion SubTotal(){return $this-                SubTotal();}
	function getSubTotal() {
		$result             ;
	            tems = $this->Items(                	if($items->count()) {
			for                ($items as $it
				if(is_a($item, Object::get                        Class("OrderAttribute"))) {
					$result += $item                            ();
				}
			}
		}
		return $result;
	}

	/**
	 *
	 * @return Currency (DB Object)
	 **/
	function                        tal                    ren                jec                {
		return DBF                    :create_field('Currenc                        is->SubTotal());
	}

	/**
	 *                            eturn Money
	 **/
	functi                                talAsMoney() {return $this->getSubTotalA                                    }
	function getSubTotalAsM                                        		return EcommerceCurrency::get_money_object_from_                                    ren                                    >SubTotal(), $this);
	}


	/**
	                                ns                             al                         f a                    er                 udi                he additional char             or        edu        ions of              modifiers.
	 * @return float
	 */
	function Total() {return $th        ->g        Total();}
	function getTotal() {
		ret        n $this->SubTota    () + $thi    ->Mod     iersSubTotal();
	}

	/**
	 *
	 * @return Currency     DB Object)
	 **/     funct    on TotalAsCurrencyObject() {
		return DBField::crea    e_field('Currency',$this->        tal());
	}

        **
	 *
	 * @return Money         **/
	function TotalAsMo            () {return $this->getTotalAs                y();}
	function getTotalAsMoney() {
		return EcommerceCurren                    et_money_object_from_order_c                ncy            his        Tot        (), $this);
	}

	/**    	 * Ch     ks       see if any payments have been m     e on     his order
	 * and if so, subracts the p        ment amount from the order
	 *
	 * @return float
	 **/
	fu    ction    Total     tst     ding() {return $t     s->ge    TotalOutstanding();}
	function getTotalOutstanding() {
		if($this    >IsSubmitted()) {
			$total = $th        ->Total();
			$paid = $this->TotalPaid();
			$outstanding = $total - $paid;
			$maxDiffer    nce = E    ommer     Config::get("Order", "maximum_ignorable_sales_payments_difference");
			if(abs($outstanding) < $maxDiff     ence) {
				$outs     ndin     = 0;
			}
			return floatval($outstanding);    		}
		else {
			return
		}
	}

	/**
	 *
	 * @return Currency (DB Object)    	 **/
    funct     n T     alOutstandingAsCurrencyObject(){     	retu    n DBField::create_field('Currency',$        is->TotalOutstanding());
	}

	/**
	 *
	 * @return Mone
	 **
	fun     ion     otalOutstandingAs     ney()    {return $this->getTotalOutstandingAsMoney();}
	function getT    talOutstandingAsMoney() {
		re        rn EcommerceCurrency::get_money_object_from_order_currency($this->TotalOutstanding(), $t    is);
	}


     **
	 * @return float
	 */
	function TotalPaid(){return $this     getTotalPaid();}
	function getTotalPaid() {
		$paid = 0;     		i     $payments = $this     Payme    ts()) {
			foreach($payments as $payment) {
				if($payment->Status    == 'Success') {
					$paid += $pay        nt->Amount->getAmount();

			}
		}
		$reverseExch            e = 1;
		if($this->ExchangeRa            && $this->ExchangeRate != 1) {
	            reverseExchange = 1/$this->ExchangeRate;
		}
		return $paid * $reverseExchange;
	}

	/**
	             	 * @return Currency (DB Object)
	 **/
	f                ion TotalPaidAsCurr            yOb            t(){
		return DBField::create_fi        d('        rrency',            is->TotalPa        ())
	}

	/**     	 *      * @return Money
	 **/
	functio     Total    aidAsMoney() {return $this->getTotalPaidAsMone        );}
	function getTotalPaidAsMoney() {
		return EcommerceCurrency::ge    _mone    _obje     _fr     _order_currency($     is->T    talPaid(), $this);
	}


	/**
	 * returns the total number of OrderItems (not m    difiers).
	 * This is meant to run as fas        as possible to quickly check
	 * if there is anything in the cart.
	 *
	 * @param Boolean $recalc    late -     o we      ed to recalculate     valu     is retained during lifetime of Object)
	 * @return I    teger
	 **/
	public functi         TotalItems(        ecalculate = false){return $this->get            alItems($recalculate);}
	public fu                on getTotalItems($recalculate = false                    	if($this->totalItems === null || $recalc                e)             		$        is-        otalItems = OrderItem::        t()
				->where("\"OrderAttribute\".\"OrderID\" = ".$th            >ID." AND \"OrderItem\".\"Quantity\" > 0")
        		-        ount();
		}
		return $this->total    tems;    	}

     **
     * Little shorthand
	 * @param Bo     ean $    ecalculate
	 * @return Boolean
	 **/
        ublic function MoreThanOneItemInCart($recalculate = false) {
	    retur     $thi     >To     lItems($recalcula     ) > 1    ? true : false;
	}

	/**
	 * returns the total number of OrderIte    s (not modifiers) times their resp        tective quantities.
	 *
	 * @param Boolean $recalculate - force recalculation
	 * @return     ouble
	    **/
	     blic function TotalItemsTimesQuantity($recalculate = false)     eturn $this->getTotalItemsTimesQuantity($recalculate);}
	publ      function getTotalItemsTimesQuantity(     eca     ulate = false) {
		if($this->totalItemsTimesQuantity === null || $recalculate) {
			//to do, why do we c     ck if you can edit      ??
		    $this->totalItemsTimesQuantity = DB::query("
				SELECT SUM(\"OrderItem\".\"Quantity\")
				F    OM \"OrderItem\"
					INNER JOIN \"OrderAttribute\" ON         OrderAttribute\".\"ID\" = \"OrderItem\".\"ID\"
			            ERE
					\"OrderAttribute\".\"OrderID\                ".$this->ID."
					AND \"OrderItem\".\"Quantity\" > 0"
			)->value();
		}
		return $this->t                ItemsTimesQu        tit        0;
	}

	/**
	 * Returns     he co    ntry      de for the country t     t applies to the order.
	 * It      ly takes into accou      what    has actually been saved.
	 * @return String (country code)
	 *
	public function Country() {return $this->getCountry();}
	    ublic    funct     n getCountry() {
		$countryCodes = array(
			"Billing" =>  "",
			"Shipping" => ""
		);
		if     thi     >BillingAddressID) {
			$billingAddress = BillingAddr     s::get()->byID($th     ->Bil    ingAddressID);
			if($billingAddress) {
				if($billingAddress->Country) {
					$countryCodes["Billing"] = $billingAdd    ess->Country;
				}
			}
		}
		if($this->ShippingAddressID && $th        ->UseShippingAddress) {
			$shippingAddress = BillingAddress::g            )->byID($this->ShippingAddressID);
			if($shipp            Address) {
				if($shippingAddress->ShippingCo                y) {
					$countryCodes["Shipping"] = $s                ingAddress->Shipping                    ry;
				}
			}
		}
		if(
			(EcommerceConfig::get("OrderAddress", "use_shipping                ress_fo                    n_region_and_country") && $countryCodes["Shippin                    			||
			(!$countryCodes["Billing"] &            countryCodes[        hip        ng"])
		) {
			return $countryCodes["Ship    ing"]
		}     	elseif($countryCodes["Billing"]) {
			return $countryCodes["Billing"];     	}
		else {
			return EcommerceCountry::get_country_from_ip(
		}
	}

	/**
	 * returns nam     of co    try
	 * @return String - country name
	 **/
	public fun    tion FullNameCountry() {return $        is->getFullNameCountry()            	public function ge            llNameCountry() {
        retu         EcommerceCountry::find_title($            s->Country());
	}

	/**
	 * returns name of coutry that we expect the             tomer to have
	 * This                 s into consideration more than j                    hat has been entered
	 * for example, it looks at GEO                 	 *            odo        why        o we dont return a string IF there is only one item.
	 * @ret             String - country name
	 **/
	public function ExpectedCountryName() {retur            this->getExpectedCountry                ();}
	public function getExpectedCountryN                     {
		return EcommerceCountry::find_title(EcommerceCountry::get_c                ry(
	}
	/
	 *             urn the title of the fixed country (if any)
	 * @return String | empty string
	 **/
	public function FixedCountry() {re            n $t            ->getFixedCountry();}
	public function getFixedCountry() {        		$co            = EcommerceCountry::get_fixed_count        _co        ();
		if($code){
			return Ecommerc            untry::find_title($code);
		}
		r        urn        ";
	}
            	/**
	 * Returns the region that applies to the or        r.
     * we    check     oth billing and shipping,       case one of them is empty.
	 * @     turn     ataObject | Null (EcommerceRegion)
	 **/
	function Region(){return $this    >getRegion();}
	public function getRegio        ) {
		$regionIDs = array(
			"Billing" => 0,
			"Shipp    ng" =     0

		if($this->BillingAddressID) {
			if($billingAddress = $thi     >BillingAddress()) {
				if($billingAddress->RegionID) {
					$region     s["Billing"] = $billingAddress->Reg     nID;
				}
			}
		}
		if($this->CanHaveShippingAddress()) {
			i     $this->ShippingAddressID) {
				i     $ship    ingAddress = $this->ShippingAddress()) {
					if($shippingAddress->ShippingRegion    D) {
						$regionIDs["Shipping"] = $shippin        ddress->ShippingRegionID;
					}
				}
			}
		}
		if(count($regionI    s)) {    			//     te the double-check with $this->CanHaveShippingAdd     ss() and get_use_....
			if($this     CanHa    eShippingAddress() && EcommerceConfig::get("OrderAddress", "use_shi    ping_address_for_main_region_and_coun        y") && $regionIDs["Shipping"]) {
				return Ecommerce        gion::get()-            ID($regionIDs["Shipping"]);
			}
			else {
        		r        urn Ecommerc    Region:    get()     byID($regionIDs["Billing"]);
			}
		}
	}

	/*
	 * Casted variable - has the order been submitted?
	 * Currency is     ot the same as the standard one.
	 * @return Bo     ean
	    **/
	function HasAlternativeCurrency(){return $    his->getHasAlternativeCurrency(        }
	function getHasAlt            ativeCurrency() {            if($currency = $t        s->C        rencyUsed()) {
			if(!$currency            sDefault()) {
				if(!$this->ExchangeRate) {
			                (!$this->IsSubmitted()) {
						$                    >ExchangeRate = $currency->getExchangeRate();
					}                			            e {        			        user_error("Order is using alternative             rency without exchange rate reco                , E_USER_NOTICE);
					}
				}
				return true;

		}
		return false;
	}

	/**
	 * spe                         processing by storing the IsSubmitted value
	 * we start with                    o k                if             has        een        equested before.
	 * @var            olean
	 */
	protected $isSubmittedTempVar = -1;

	/**
	 * Casted variable -            s the order been submitted?
	 * @param Boolean $recalculate
	 * @return Boolean
	 **/
	function IsSubmitted($recalculate = false){return $this->getIsSubmi                ($recalculate);}
	function getIsSubmitted($recalculate = false
		            $this->i                mittedTempVar == -1 || $recalculate) {
			if($this->Submissio            g()        {
	    		$th    s->is     bmittedTempVar = true;
			}
			else {
				$this->     SubmittedTempVar = false;
			}
		}
		return $th     ->isSubmittedTempVa
	}


	/**
	 * Submission Log for this Order (if any)
	 *
	 * @return Submissio     Log (OrderStatusLog_Submitted) | Null
	        */
	public function SubmissionLog(){
		$            ssName = EcommerceConfig::get("                rStatusLog", "order_status_l                    ass_used_for_submitting_order                        return $className::get()
			->Filter(array("OrderID"                     his                    )
			->F                        ;
	}

	/**
	 * Casted variable - has the order been submitted?
	 * @param Boolean $withDetail                     @r                n S                g
	 **/
	func            n C        tom        Status($withDet    il =     rue){     turn $this->getCustomerStatus($withDetail);}
	function ge     ustomerStatus($withDetail = true) {
		if($this->MyStep()->Sho     sUncompletedOrde      { $     =  _t("Order.UNCOMPLETED", "Uncomplete    ");}
     elseif($this->MyStep()->ShowAsInProcessOrder) { $v      _t("Order.IN_PROCESS", "In Proc     s");}
		elseif($thi     >MySt    p()->ShowAsCompletedOrder) { $v = _t("Order.UNCOMPLETED", "Uncompleted");}
		if(!$this->H    deStepFromCustomer && $withDetail) {
			$v .= ' (        $this->MyStep()->Name.')';
		}
		return $v;
	}



	 * Casted variable - does th                der have a potential shipping addre
	             	 * @ret                Boolean
	 **/
	function CanHaveShip            gAd        ess         {return $this->getCanHaveShippingA    dress()    }
	fu     tion getCanHaveShippingAddress() {
		retur     Eco     erceConfig::get("OrderAddress", "use_separate_shipping_addre     ");




	/**
	 * returns the link          view the Order
	 * WHY NOT CHECKOUT PAGE: first we check for cart page.
	 * @return CartPage | Null
	 *
	function DisplayPage() {            	if($this->MyStep() && $this->MyStep()->A            rnativeDispl    yPage    )) {
     	$page = $this->MyStep()->AlternativeDisplayPage();     	}
		elseif($this->IsSubmitted     ) {
			$page = Ord     Confi    mationPage::get()->First();
		}
		else {
			$page = CartPage::get()
				->Filter(array("C    assName" => 'CartPage'))
				->First();
			if(!$p        e) {
				$page = CheckoutPage::get()->First();
			}
		}
		return $page;
	}

	/**
	 * re        rns the link to view the Order
	 * WHY NOT CHECKOUT PAGE: first we check for cart page.
	 *          a cart page has been created then we refer through to Cart Page.
	 * Otherwise it will default        o the checkout page
	 * @param String $action - any            tion that should be added to the link.
        * @        turn String(    RLSegme    t)

	function Link($action = "") {
		$page = $this->DisplayPage();
		if(     age     {
			return $page->     tOrde    Link($this->ID);
		}
		else {
			user_error("A Cart / Checkout Page + an Order    Confirmation Page needs to be setup for         e e-commerce module to work.", E_USER_NOTICE);
			$page = ErrorPage::get()
			    ->Filter(    rray(     rrorCode" => '404'))
				->First();
	     if($page) {
				return $page->Link($action);
			}
		}     }

	/**
	 * Returns to lin     to a    cess the Order's API
	 * @        ram String $version
	 * @param String $extension
	 * @return String            L)
	 */
	function APILink($version = "v1", $extensi         =         ml"){
		return Director::Absolut            L("/api/ecommerce/$version/Order/".$this->ID."/.        xte        ion");

	/**
	 * returns the li                o finalise the Order
	 * @return String(URLS                nt)
	 */
	f            tion CheckoutL                ) {
		$page = CheckoutPage::get()->Firs            ;
	        f($        ge) {
			return    $page    >Link     ;
		}
		else {
			$page = ErrorPage:     et()
				->Filter(array("ErrorCode" => '404'))
				->Fi     t();
			if($page) {
				return $page->Link();
			}
		}
	}

	/**
     * Converts the Order into HTML, based on the Order     emplate.
	 * @return String - HTML
	 **/
	public function ConvertToHTM     ) {
		$isThemeEnabled = Config     inst    )->get('SSViewer', 'theme_enabl        ');
		if(!$isThemeEnabled) {
	        Config::inst(            update('SSViewer', 'theme_enabled', true

		$html            $this->renderWith("Order");
		if(!$isThemeEnabled) {
			Config::inst()->update('SSViewer', 'theme_enabled', false);
		}
		return $htm
	}

	/**
	 * Converts                 Order into a serialized string
	 * TO D                heck if this            rks and check                we need to use special sapphir            eri        iza    ion c    de
	      @return String - serialized object
	 **/
	pu     ic function ConvertToStrin     ) {
		return serialize($this     addHasOneAndHasManyAsVa     able    ());
	}

	/**
	 * Converts the Order into a JSON obje
	 * TO DO: check if this works and check if we need to use special sapphire JSON code
	      @ret    rn St     ng -  JSON
	 **/
	public function Convert     JSON() {
		return json_encode(     his-    addHasOneAndHasManyAsVariab        s());
	}


	/**
	 * returns itself         ih more data             ed as variables.
	 * We        dd         s_one an            as_many as variables like                 : $this->MyHasOne_serialized = serializ                his->MyHasOn            )
	 * @return                er - with most importan            as         e a    d has    many      ems included as variables.
	 **/
	protected function addHasOn     ndHasManyAsVariables() {
     /*
		    THIS HAS TO BE REDONE - IT IS NONSE        ICAL!
		$this->Member_serialized = serialize($this->Member());
		$th        ->BillingAddress_seriali             = serialize($this->BillingAddress());
		$this->ShippingAddr        s_s        ialized = serialize($this->ShippingAd        ess());
		$this->Attribu            _serialized = serialize($this->Attributes());
		$this->OrderS        tus        gs_serialized =    seria    ize($     is->OrderStatusLogs());
		$this->Payments_seria     zed = serialize($this->Payments());
		$this->Emails_serialized = serialize($this->Emails());
     $this->Title_serialized = serialize($t     s->Ti    le());
		$this->Total_serialized = se        alize($this->Total());
		$this->SubTotal_serialized = serial    ze($t    is->S     Total());
		$this->TotalPaid_serialized =     erialize($this->TotalPaid());
		*/

		return $this;
	}




/*****************     **************************     *****    **
   * 9. TEMPLATE RELATED STUFF
        *****************************************************/

	/**    	 * retu    ns th     instance of EcommerceConfigAjax for use in templates.      * In templates, it is used like this:
	 * $EcommerceConfigAjax.TableID
	 *
	 * @return EcommerceConfigAjax
	      /
	public function AJAXDefinitions() {
		return EcommerceConfigAjax::get_one($this);
	}
	/**
	 * returns the instance of EcommerceDBConfig
	 *
	         @ret             EcommerceDBConfig
	 **/
	public function E        mConfig(){
		return EcommerceDBConfig::current_ecommerce        b_config();
	}

	/**
	 * Collects the JSON data for an ajax return of        he cart.
	 * @param Array $js
	 * @return Array (for use in AJAX for JSON
	 **/
	function updateForAjax(array $js) {
		$function = Ecom        rceConfig::get('Order', 'ajax_subtotal_format');
		if(is_array($function))
			list($function, $format) = $function;
		}
		$subTotal         $this->$function();
		if(isset($format)) {
			$subTotal         $subTotal->$format();
			unset($format);
		}
		$fun        ion = EcommerceConfig::get('Order', 'ajax_total_format        ;
		if(is_array($function)) {
			list($function, $format) =        function;
		}
		$total = $this->$function();
		if(isset($for        t)) {
        	$total = $tota    ->$format();
		}
		$ajaxObject = $this->AJAXDefinitions();
		$js[]    rray(
			't' => 'id',
			's' => $ajaxObject->TableSubTotalID(),
			'p' => 'innerHTML',    			'v'     > $subTotal
		);
		$js[] = array(
			't' => 'id',
			's' => $ajaxO     ect->TableTotalID(),
			'p' => 'innerHT     ',
			'v' => $total
		);
		$js      =      ray(
			't' => 'class',
			's'     > $aj    xObject->TotalItemsClassName(),
			'p        => 'innerHTML',
			'v' => $this->TotalItems($    ecalc    late      true)
		);
		$js[] = array(
			't' => 'clas     ,
	     's' => $ajaxObject->TotalItem     imesQ    antityClassName(),
			'p' => 'i        erHTML',
			'v' => $this->TotalItemsTimesQuantity()
		);    		$js[     = ar     y(
			't' => 'class',
			's' => $ajaxObject->ExpectedCoun     yClassName(),
			'p'     > 'innerHTML',
			'v' => $this->ExpectedCoun     yName    )
		);
		return $js;
	}

	/**
	         @ToDO: move to more appropriate class
	 * @return Float
	 **/
	pub        c function SubTotalCartValu             {
		return $this->SubTotal;
	}




        **********************************        *******************
              10. STANDARD SS METHODS (requireDef            tRecords, onBefor        ele        , etc...)
*******************************************************

	/**
	 *standard SS met
	 *
	 **/
	function populateDefaults         {
        parent::populateDefaults();
		        (!$this->SessionID) {
            $this->SessionID = session_id        ;

	}

	function onBeforeWrite() {
		par        t::onBeforeWrite
		if(! $this-            rrencyUsedID) {
			$this->CurrencyUsedID            EcommerceCurrency::de            lt_currency_id();
        }
	}
	/**
	 * stand             SS method
	 *            ds the ability to update order after             ting it.
	 **/
	func            n onAfterWrite(        {
		        rent::onAfterWri            );
		//crucial!
            elf::set_needs_recalculating();
		if($this->            ubmitted($recalculate            true)) {
			//do nothing
		}
		else {
			if(        his-        tatusID) {
				$            s->calculateOrder            ributes($recalculate = false);
				if(EcommerceRole::curr            _member_is_shop_admin            {
					if(isset($_REQUEST["SubmitOrderVia        S"])        {
						$this->t            oFinaliseOrder();            				//just in case it writes again...
						unset            REQUEST["SubmitOrderV            MS"]);
					}
				}
			}
		}
	}
        	/**         *standard SS    metho
	 *      * delete attributes, statuslogs, and paym     ts
	 * THIS SHOUL     NOT B     USED AS ORDERS SHOULD BE CANCELLED NOT        ELETED
	 */
	function on    eforeDelete(){
		parent::onBeforeDelete();
		if($attributes = $this->Att   utes()){
			foreach($attributes as $attribute){
				$attribute->delete();
				$attribute->destroy();
			}
		}

		//THE REST WAS G    VING      RORS - POSSIBLY DUE T     THE     UNNY     ELATIONSHIP (one-one, two times        .)
		/*
		if($billingAddress         $this->BillingAddress())            			if($billingAddress->exists()) {        			    billi    gAddress->delete();
				$bil        ngAddress->destroy();
			}        		}
		if($shippingAddress = $th            >ShippingAddress()) {
			if($shippingAddress->exists()) {
				$shi        ing    ddres    ->del     e();
				$shippingAddr     s->destroy();
			}
		}

		if($statuslogs = $this->O     erSta    usLogs()){
			foreach($stat        logs as $log){
				$log->        lete();
				        og->destroy();
			}
		}
		if($pa        ents = $this->Payments()){
			foreach($payments             $payment){
		        $pa        ent->del            ();
				$payment->destr                ;
			}
		}
		if($emails = $this->Emails()) {
			forea                emails as $email){
				$email->delete();
				$email                    troy();
			}
		}
		*/

	}






/*                        ******************************                        ************
   * 11. DEBUG
******                        ****************************************
	/                	 *            bug        elp    r met    od.
	      Can be called from /     opp     gcart/debug/
	 * @return String
	 */
	public      nction debug() {
		$this->calculateOrderAttributes(true);
		return E     mmer    eTaskDebugCart::debug_object        this);
	}

}





        lass Order_Unsubmitted extends DataObject
	/**
	 * standard SS variable
	 *                  String
	 */
	private                 ic $singular_name = "Uns            itt         Orde        ;
		function i18n_singular_name() { return _t("Order.ORDER", "Order");}

	/**
	 * standard S        vari        le
	 * @var String
	 */
	private static $plural            me = "Unsubmitted Orders";
		func                 i18n_plural_name() { return                "Order.ORDERS", "Orders");}
            **
	         St        dard SS variable.
	 * @var String
	 */
	private s            ic $description = "A collection of                ms that together make up the                 er'.  An order can be placed."
	p        lic s        tic function reset_modifiers() {self::$modifi             = array();}

	/**
	 * Tells                 f an order needs                 e recalculated
	 *            ar         ole
	 */
	private static $needs_recalc            ting = false;
		public static fun                n set_needs_recalcula                (){ self::$needs_recal            ati         =         ue;}
		public static function get            eds_recalculating(){ return s                :$needs_recalculati

	/**
	 * Total I            s :        ota        items     n cart
	 * We start with -1 to easily identify if it has been run before.    *
	 * @var integer
	 */
	protected $totalItems = null;

	/**
	 * To    al It     s : total items in cart
     * We start with -1 to easily identify if it     as been run before     	 *     var Double
	 */
	protected        totalItemsTimesQuantity = null;


	pub        c static function get_modifier_forms($controller) {
	    user_error("this method has been changed to getModifierForms, the cu    rent      nction has been deprecia     d", E_USER_ERRO     ;
	}

	/**
	 * Returns a set of modifier forms for use i        the checkout order form,
	 * Controller is optional, because the orderF    rm ha     its own default controll     .
	 *
	 * This     etho     only returns the Forms that should be included outsi
	 * the editable table... Forms within it can be called
	 * from thro    gh th     modifier itself.
	 *
	 *     param Controlle     $opt    onalController
	 * @param Validator $optionalValidator
	 * @return ArrayList (ModifierForms) | Null
	 **/
	public f    nction getModifierForms(Controller $optionalController = null, Validator $    ption     Validator = null) {
		$arrayList = new ArrayList(
		$modifiers =      his-    Modifiers();
		if($modifiers->count()) {
			f        each($modifiers as $modifier) {
				if($modifier->ShowForm()) {
					if($form = $modif        r->getModifierForm($optionalController, $optionalValidator)) {
						$form->ShowFormInEdi    ableO     erTable = $modifier->ShowFormInEditab     OrderTable();
						$form->ShowFormOutsideEditableOrderTable = $mo     fie     >ShowFormOutside     itab    eOrderTable();
						$form->Modif    erNam     = $modifier->ClassName;
						$arrayL     t->push($form);
					}
				}
			}
		}
		if( $arrayList->count(     ) {
			return $     rayL    st;
		}
		else {
			return null;
		}
	}


	/**
	 * This function returns the OrderSteps
	 *
	 * @        turn ArrayList (OrderSteps)
	 **/
	public static function get_order_status_options() {
		return OrderStep::get();
	}
    	/**
	    * Lik     the standard byID, but it checks whether we are allowed to view the ord     .
	 *
	 * @return: Order | Null
	 **/
	public static function get_by_id_if_can     iew     id) {
		$order = Order::get()->byID($id);
		if($order && $order->canV     w()){
			if($order->IsSubmitted()) {
				// LITTLE HAC     TO MAKE SURE WE SHOW THE LATEST INFOR     TIO
				$order->tryToFinaliseOrder();
			}     		return $order;
		}
		return null;
	}
	/**
	 * returns a Datalist with the submi     ed or    er log included
	 * this allows you to sort the orders by their submit dates.
	 * You can retrieve this list an        then add more to it (e.g. addit        nal filters, additional joins, etc        .)
	 * @param Boolean $only            mittedOrders - only include Orders t                have already been submitted.
                    return DataList (Orders)
	 */
	public static function get_datalist_of_orders_with_                        _record($onlySubmittedOrders = false){
		$submittedOrderStatusLogClassName = Ecomm                        nfig::get("OrderStatusLog", "order_status_log_class_used_for_submitting_order");
		$list = O                        get()
			->LeftJoin("OrderStatusLog", "\"Orde                        ID\" = \"OrderStatusLog\".                    erI                )
	            >Le        Joi        $submittedOrderStatusLogClass            e, "\"OrderStatusLog        .\"        \" = \""            ubmittedOrderS        tus    ogClassNa    e."\"     "ID\"")
			->Sort("OrderStatusLog.Create     , "     C");
		if($onlySubmittedOrders) {     		$lis     = $list->Where("\"OrderStatusLog\".\"ClassName\" = '        ubmittedOrderStatusLogClas    Name'    );

		else {
			$list = $list->Where("\"OrderStatusLog\".\"ClassName\" = '$submittedO     erS     tusLogClassName' OR \"Ord     Statu    Log\".\"ClassName\" IS NULL");
		}
		return $list;




/***************************        **************************
   * 1.            S STUFF
*********************                ******************************/

	/**
	 * fields that we re                 from the parent::getCMSFields             ect            t
	 * @var Array        	 *        	protected $fi    ldsAn    TabsT     eRemoved = array(
		'MemberID',
		'Attributes',
		'Session     ',
		'Emails',
		'BillingAddressID',
		'ShippingAddressID',     		'UseShippingAddress',
		'OrderStatusLogs',
		'Payments',
		'OrderDate',
		'ExchangeRate',
		'Currenc     sedID',
		'StatusID',
		'Currency'
	);


	/**
	 * STANDARD SILVERSTRIPE STUFF
	 **/
	pr     ate static $summary_fields =      ray(    		"Title" => "Title",
		"Status.Title" => "Next Step"
	);
		public static function get_summary_        elds() {return self::$summary_fields;}

	/**
	 * STANDARD SILVERSTRIPE STUFF
	 * @todo: how to translate this?
	 **/
	privat        static $searchable_fie             = array(
		'ID' => array(
			'field' => 'NumericField',
			'title' => 'Order Num            '
		),
		'MemberID' => array(
			'field' => 'TextField',
			'filter' => 'OrderFilters_MemberAndAddress',
			'title' => 'Cus            er Details'
		),
		'Created' => array(
	        'field' => 'TextField',
			'            ter' => 'OrderFilters_AroundDateFilter',
			'title' => 'Date (e.g. Today, 1 jan 2007, or last wee        '
	        ,
		//ma            sure to keep the items below, otherwise they do not show in form
		'StatusID' => array(
			'filter' => 'OrderFilters_MultiOptionsetStatusIDF        ter        		),
		'Cancell    dByID' => array(
			'filter' => 'OrderFilters_HasBeenCancelled',
	   title' => "Cancelled"
		)
	);


	/**
	 * Determine which properties on     he Da     Object are
	 * searchable, and map them to their default {@link Fo     Field}
	 * rep     sent    tions. Used for scaffolding a searchform for {        ink ModelAdmi        .
	 *
	 * Some        dditional logi        is included        or switching field la        ls, based on
	 * how g        eric or specific the fi        d type is.
	 *
	 *         ed by {@link         archContext}.
        *
	 * @param arra        $_params
	 * 	'fiel        lasses': Asso        ative array     f field     ames       keys and FormField classes as      lues
     * 	'restrictFields': Numeric array of a         eld name whitelist
	         @return FieldList
	 */
	public    func        on scaffoldSearchFields($_params = null) {
		$fieldList = parent::scaffoldSearc    Field     $_params);
		$statusOptions = O     erStep::get();
		if($statusOption     && $s    atusOptions->count()) {
			$createdOrderStat        ID = 0;
			$preS            cted = array();
			$createdO            rStatus = $statusOptions->F        st()        			if($createdOrderSta            ) {
				$createdOrderStat            D = $createdOrderStatus->ID;
			}
			$arrayOf            tusOptions = clone ($statusOpti        s->m        ("ID", "Title"));
			            rayOfStatusOptionsFinal =            ray();
			if(count($arrayOfStatusOptions)) {
            	foreach($arrayOfStatusOptions as $key => $value) {
					$        unt         Order::get()
						->Filter(array("StatusID" => intval($key)))
						->c        nt();
					if($count <             {
						//do nothing
					}
					else {
						$arrayO        tatu        ptionsFinal[$key] = $value              ($count)";
					}
					//we use 100 here bec            e if there is such a big        ist     an addi    ional     ilter should be added
					if($count > 100) {

					else {
						if($key != $createdOrderStatusID) {
						     preSelected[$key] = $key;
						}
					}
				}
			}
			$statusField = new      eck     xSetField("StatusID", "Status", $arrayOfStatusOptionsFinal);
			$statusFie     ->setValue($preSelected);
			$fieldList->push(     tat     Field);
		}
		$fieldList->push(ne     Dro     ownField("CancelledByID",     Cancelled", array(-1 => "(Any)", 1 => "yes", 0 => "no")));
		return $fieldList;
	}

	/**
     * @param String $action - e.g. edit
	 * @return String
	 */
     ublic function CMSEdi     ink(    action = "") {
		$link = "/admin/sales/Order/EditForm/fie        /Order/item/".$this->ID."";
		if($action) {
			$link         $link . "/".$action;
		}
		return $        nk;
	}

	/**
	 * STANDARD SILVERSTRIPE STUFF
             broken up into submitted an            ot (yet) submitted
	 **/            unction getCMSFields(){
		$fields = parent::getCM            elds();
		if($this->exists(
			$submitted = $this->IsSubmitted() ? true : fal
		            ($submitted) {
				//TODO
				//Having trouble here, as when you sub             the form (for example, a payment confi            tion)
				//as the step moves forwar                eaning the fields generated are incorrect, causing a                    or
				//"I can't handl                        URLs of a Form object." generated by the Requ                        dler.
				//                    fore we need to tr                        ad the page so                     it                     be requ                         the correct URL to generate the correct fields for the cu                     st                    		//Or something similar.
				//why not check if the URL == $this->CMSEditLink()
				//and o                    ryToFinaliseOrder if                     is                    ....
			                        SERVER['REQUEST_URI'] == $this->CMSEd                            ) || $_SERVER['REQUEST_URI']                        his                    Edi                k("            t")
					$this->tryToFinaliseOrder();
				}
			}
			else {
				$this->init(true);
			}            		if($submitted) {
				$this->fieldsAnd            sToBeRemoved[] = "CustomerOrderNo        ";
        	}
			else {
				$this->fieldsAndTabsToBeRemoved[] = "Emails";
			}
			foreach($this->fieldsAndTabsToBeRemoved        s $field) {
				$fie    ds->r    moveB     ame($field);
			}
			$fields->insert     ter(
				new Tab(     				"    ext",
					new HeaderField("MyOrderStepHeader         _t("Order.CURRENTSTATUS", "Current Status")),
					$this->OrderStepFie        (),
					new He            rField("OrderStepNextStepHeade        , _        "Order.ACTIONNE    TSTEP    , "Ac     on Next Step"), 1),
					new Li     ralField("OrderStepNextStepHeaderExtra", "<p><strong     ._t("    rder.NEEDTOREFRESH", "If y         have made any changes to the order        hen you will have to re            sh or save this record to see up-to-date options he            ")."</strong></p>"                				new                 ralField("ActionNextStepManually", "<br /><br /><br /><h3>"._t("Order.MANUALSTATUSCHANGE",                nual Status Change")."</h3>")
					//SEE: $this->MyStep()->addOrderStepFields($fields, $thi                BELOW
				),
				"Main"
			);
			if($submitted) {
				$isThemeEnabled = Conf                inst()->get('SSViewer', 'theme_enabled');
				if(!$isThemeEnabled) {
					Config::inst()->update('SSViewer', 'theme_enabled', true);
				}
                $htmlSummary = $this->ren                ith("Order");
				if(!$isThemeEnabled) {
					Confi                nst()->update('SSViewer', 'theme_enabled', false);
                }

				$fields->addFieldToTab('Root.Main', new LiteralField('MainDetails', '<iframe src="'.$this->PrintLink().'                    th="100%" height="500"></ifram                );
            	$f            ds->inse                ter(
					new Tab(
            			            ails",
						$this                tEmailsTableField()
					),
					"Next"
				);
				$fie            ->a            ieldToTa                oot.Payments',$this->getPaymentsField());
				$            lds            ddFieldToTab("Root.Payments", new ReadOnlyField("Total                ", _t("Order.TOTALPAID", "Total             d")            this->getTotalPaid()));                	$fields->                    eldToTab(                    .Payments", new ReadOnlyField("TotalOutstanding", _t("Order.TOTALOUTSTANDING", "Tota                    standing"), $this->getTota                    tanding()));
				if($this->canPay()) {
					$link = EcommercePaymentController::make_payment_li                    his->ID);
					$js = "window.open(this.href, 'payment', 'toolbar=0,scrollbars=1,location=1,statusbar=1,menubar=0,resizable=1,width=800,height=600'); return false;";
					$header = _t("Order.MAKEPAYMENT", "make payment");
					$label                     "Order.MAKEADDITIONALPAYMENTNOW", "make additional payment now");
					$linkHTML = '<a href="'.$link.'" onclick="'.$js.'">'.$label.'<
					$fields->addFieldToTab("Root.Payments", new HeaderField("Make                tion                ymentHea            ", $            der, 3));
					$fi                ->addFieldToTab("Root.Payments", new LiteralField("MakeAdditionalPaym                , $linkHTML));
				}
		                    ember
				$member = $this->Member();
				if($member && $mem                >ex                ()) {
					$fields->addFieldToTab('Root.Acco                , new LiteralField("Memb                    ails", $member->getEcommerceFieldsForCMS()));
				}
				else                					                lds->addFieldToTab('Root.Customer', new LiteralField("MemberDetails",
						"<p>"._t("Order.NO_ACCOUNT","There is no account associated with this o                ")."</p>"
					));
			                    			$cancel                        ld = $field                        aFieldByName("CancelledByID");                    $fie                    removeBy                ("Ca                ledByID");
				$fields->addFieldToTab("Root.Cancellation", $cancelle                ld);
				$fields->addFieldToTab('Root.Log', $this->getOrderStatusLogsTableField_Archived());
				$submissionLog = $this->SubmissionLo
				if($submissionLog) {
					$fields->addFieldToTab('Root.Log',
						new ReadonlyField(
							'SequentialOrderNumber',
							_t("Order.SEQUENTIALORDERNUM                , "Sequential order num                    or submitted orders (e.g. 1,2,3,4,5...)"),
							$submissionLog->S                    tialOrderNumber
						)
					);
				}
			}
			else {
				$linkText = _t(
					"Order.LOAD_THIS_ORDER",
					"load this order"
				);
				$mess                     _t(
					"Order.NOSUBMITTEDYET",
					"No details                     hown here as this order has not been submitted yet. You can {link} to submit it                    OTE: For this, you will be logged in as the customer and logged out a                    op)admin .",
					array("link" => '<a href="'.$this->RetrieveLink().'" target="_blank">'.$linkText.'</
				);
				$fields->addFieldToTab('Root.Main', new LiteralField('MainDetails', '<p>'.$message.                >')                			$fields                dFieldToTab('Root.Items',$th                getOrderItemsField());
				$fields->                    eldToTab('Root.Extras', $this->getModifierTableField());

				//MEMBER STUFF
				$specialOptionsArray = array()                			                this->Me                    D) {
					$specialOptionsArray[0] =  _t("Order.SELECTCUSTOMER", "-- - Remov                        tomer -- -");
					$specialOptionsArray[$this->MemberID] =  _t("Order.LEAVEWITHCURRENT                    MER",                Lea                ith current customer: ").$this->Member()->getTitle();
				}
	                lseif($currentMember = Member::currentUse                 {
					$specialOptionsArray[0] =  _t("Order.SELECTCUSTOMER", "                 Select Customers -- -");
					$currentMemberID = $currentMember->ID;
					$specialO                nsArray[$currentMemberID] = _t("Order.ASSI                ISORDERTOME", "- Assig                    s order to me: ").$currentMember->ge                        ();
				}
				//MEM                            LD!!!!!!!
				$memberArray                            cialOptionsArray + EcommerceRole::list_of_customers();
				$fields->addFieldToTab("Root.Main", new Dropd                            d("MemberID", _t("Order.SELECTCUSTOMER"                        ect                    omer                $me            rAr            ),"Custo                rderNote");
				$                    rArray = null;
			}
			$f                    ->addFieldToTab('Ro                ddre                ',new HeaderFiel                    llingAddressHeader", _t("                    .BILLINGADDRESS", "Billing Address")));


			$fields->addFieldToTab('Root.Addresses',$this->getBillingAddressField());

			if(EcommerceConfig::get("OrderAddress", "use_separate_shipping                    ess")) {
				$fields->addFieldToTab('Root.Addresses',new HeaderField("ShippingAddressHeade                _t("                r.SHIPPINGADDRESS", "Shipping Address")));
				$fields->addFieldToTab('Root.Addresses',new Che                xField("UseShippingAddress", _t("Order.USESEPERATEADDRESS", "Use se                te shipping address?")));
				if($this->UseShippingAddress) {
					$field                ddFieldToTab('Ro                ddresses',$this->getShippingAddre                eld());
				}
			}
		                    s->MyStep()->addOrderStepFields($fields, $this);
			$fields->addFieldToTab(
				"Root                    ",
				new LiteralField(
					"StatusIDExplanation",
					_t("Order.STATUSIDEXPLANATION", "You can not manually update the status of an order
		                <br /><br /><a href=\"".$this->CMSEditLink()."\">"                    Order.REFRESH", "refresh order status")."</a>"
				)
			);
			$currencies = Ecommerc                    ency::get_list();
			if($currencies && $                    ncies->count()) {
				$currencies = $currencies->map()->toArray();
				$fields->addFieldToTab("Root.Currency", new NumericField("Exc                eRa                , _t("Order.EXCHANGERAT                "Exchange Rate")));
				$fields->addFieldToTab("Root.Currency", new LookupF                ("CurrencyUsedID", _t("Order.CurrencyUsed", "Currency Used"), $currencies));
			}
			$fields->addFieldToTab("Root.Log", new ReadonlyField("Created",                 Root.CREATED", "Create            ));            	$fields->addFieldToTab("Root.Log", new ReadonlyField("LastEdited", _t("Root.LASTEDITED", "Last saved")));
		}
		else {
			$fields->            oveByName("Main");
			$firstStep = OrderStep::get()->First();
			$msg = _t("            er.VERYFIRSTSTEP", "Start by creating an order - click on the create button .                ;
			$fields->addFieldToTab("Root.Next", new LiteralField("VeryFirstStep", "<p>".$msg."</p>"));
			if($firstStep) {
				$fields->ad                ldToTab("Root.Next", new HiddenField("StatusID", $firstStep->ID, $firstStep->ID));
			}
		}
		$this->extend('updateSettingsFields',$fields);
		ret                $fields;
	}

	/**
	 * Field to                    and edit Order Items
	 * @return GridField
	 */
	protected function getOrd                ems            ld(            		$gridFieldConfig = GridFieldConfig_RecordEditor::cre            ();
		$source = $this->Or                tems();
		retu                ew GridField("Order                    ", _t("OrderItems.PLURAL                    , "Order Items"), $source , $gridFieldConfig);
	}

	/**
	 * Field to add and edit Modi
	 * @return GridField
	 */
	function getModifierTableField(){
		$gridFieldConfig = GridFieldConfig_R                dEd            r::c            te();
		$source = $this->Modifiers();
		retur            ew GridField("OrderModifiers", _t("OrderIte                LURALNAME", "Order Items"), $source , $gridFie                nfig);
	}

	/**
	 *
	 *@return GridField
	 **/
	protected function getBillingAddressField(){
		$this->CreateOrRet                xistingAddress("BillingAddress");
		$gridFieldConfig = GridFieldConfig::create()->addComponents(
			new GridFieldToolbarHeader(),
	            ew             dFieldSortableHeader(),
			new GridFieldDataColumns(),
			new GridFieldPaginator(10),
			new Gri            eldEditButton(),
			new GridFieldDetailForm()
		);
		//$source = $this->BillingAddress();
		$source = Bi        ing        dress::g            )->filter(array("OrderID" => $th            >ID));
		return new GridField("BillingAdd            s", _t("BillingAddress.SINGULARNAME", "Billing Address"), $source , $gridFieldConfig);
	}


	/*            	 *
	 *@return GridField
	 **/
	protected function getShippingAddressField(){
		$this->Cr            eOrReturnExistingA                ss("ShippingAddress");
		$gridFieldConfig = GridFieldConfig::create()->addComponents(
			new GridF            dTo        bar        ader(),
			new GridFieldSortableHeader(),
			ne        GridFieldDataColu    ns(),    			ne     GridFieldPaginator(10),
			new GridFi     dEditButton(),
			new     ridF    eldDetailForm()
		);
		//$source = $this-        hippingAddress();
		$source = ShippingAddress::get()->filter        rray("OrderID" => $this->ID));
	        eturn new GridField("ShippingAddress", _t("BillingAddress.SINGULARNAME", "Shipping Address"), $source , $grid    ieldC    nfig)     	}

	/**
	 *
	 * @return GridFie
	 */
	function getO     Orde    StatusLogsField(){
		Deprecation::n        ice('3.0', 'Use order::getOrderStatusLogsTableField instead.        ;
		return $this->getOrderStatu        ogsTableField();
	}

	/**
	 *
	 * @return GridField
	 * @deprecated
	 */
	function OrderStatusLogsTable($s    urceC    ass =     Ord     StatusLog", $title =     ", Fi    ldList $fieldList = null, FieldList $detailedF        mFields = null){
		Deprecation::notice('3.0', 'Use order:        etOrderStatusLogsTableField instead.');
		return $this->getOrd            tatusLogsTableField($sourceClas            $title, $fieldList, $detailedFor            elds);
	}

	/**
	 * Needs             be public because the OrderSt            :getCMSFIelds accesses it.
	            @param String $sourceClass
        * @p        am String $title
	 * @param FieldList         ieldList (Optional)
	 * @param FieldList $detailedFormFields (Optional)
        *
	 * @return GridField
	 **/
	public function getOrderStatusLogsTableField($sourceClass = "OrderStatusLog", $title = "",    FieldLi    t $fi     dLi      = null, FieldList $     taile    FormFields = null) {
		$gridFieldConfig = GridF        ldConfig_RecordViewer::create()->addComponents(
			new Gri        ieldAddNewButton('toolbar-header-right'),
			new GridFieldDeta            orm()
		);
		$title ? $title :            itle = _t("OrderStatusLog.PLURAL            E", "Order Status Logs");
		$            rce = $this->OrderStatusLogs(            Filter(array("ClassName" =>             urceClass));
		$gf = new Gr        Fiel        $sourceClass, $title, $source , $gridFi        dConfig);
		$gf->setModelClass($sourceClass);
		return $gf;
	}

	/**
        * @param String $sourceClass
	 * @param String $title
	 * @param FieldList $fieldList (Optional)
	 * @param FieldList $deta    ledFo    mFiel      (O     ional)
	 *
	 * @retu      Gri    Field
	 **/
	protected function getOrde        tatusLogsTableField_Archived($sourceClass = "OrderStatusLog", $title = "", FieldL        t $fieldList = null, FieldList $detailedFormFie    ds =     ull)      		$     idFieldConfig = GridF     ldConfig_Record     ewer    :create()->addComponents(
			new GridFieldDetailForm()
		);
		$title ? $title : $title = _t("OrderItem.PLURALNAME", "Order Log");
		$source =         his->OrderStatusLogs();
		return new GridField($sourceClass, $title, $source , $g        dFieldConfig);
	}

	/**
	 *
	 * @return GridField
	 **/
	public function getEmailsTableField()    {
		$    ridFi     dConfig = GridFieldConfig_RecordViewer::create()->addComponents(
			new     ridFieldDetailForm()
		);
		r     urn new GridField("Email     , _t("Order.CUSTOMER_EMAILS", "Customer Em     ls"), $this->Emails(), $gridFieldConfig);
	}

	/*

	 * @return GridFiel
	 */
	protected function getPaymentsField(){
		$gridFieldConfig = GridFieldConfig_RecordViewer::create()->addComponents(
			new GridFieldDetailForm(),
			new Grid        eldEditButton()
		);
		return new GridField("Payments", _t("Order.PAYMENTS            "Payments"), $this->Payments(), $gridFieldConfig);

	/**
	 * @return OrderSte        ield         */
	function OrderStepField() {
		return OrderStepField::create($name = "MyOrder        ep", $this, Member::currentUser());
	}






/****************************        *************************
   * 2. MAIN TRANSITION FUNCTIONS
***********        ***********************************        *****/

	/**
	 *     nit r     s on start of a new Order (@se     onAfterWrite)
	 * it add     all the modifiers to the orders and the st     ting OrderStep
	 *
	 * @param Boolean $recalculate     	 *     return DataObject (Or     r)
	     */
	public function init($recalculate = false) {
		//to do: check if shop is open....
		if($this->StatusID || $recalculate) {
			if(!$this->StatusID) {
				$createdOrder        atus = OrderStep::get()->First();
				$this->StatusID = $createdOrderStatus            D;
			}
			$createdModifie        Clas        ames = array();
			$modifiersAsArrayList = new ArrayList();
			$modi        ers = $this->modifiersFromDatabase($i        ludingRemoved = true);
			if($modifiers->count()) {
				foreach($modifie    s as     modif     r)      					$modifiersAsArra     ist->    ush($modifier);
				}
			}
			if($modif        rsAsArrayList->count()) {
				foreach($modifiersAsArrayList as $modifier) {            				$createdModifiersClassN        es[$        difier->ID] = $modifier->ClassName;
				}
			}
			else {

			}
			$modifiersToAdd = EcommerceConfig::get("Order    , "mo    ifier     );
     	if(is_array($modifie     ToAd    ) && count($modifiersToAdd) > 0) {
				f        each($modifiersToAdd as $numericKey => $className) {
					if(!in_array($cla            ame, $createdModifiersClassN            s)) {
						if(class_exists        clas        ame)) {
							$modifier = new $className();
							//only add the ones that should be added automaticall
				    		if(     modifier->DoNotAddAutomati     lly(    ) {
								if(is_a($modifier        "OrderModifier")) {
									$modifier->OrderID = $this->ID;
									$modifier->Sor     = $numericKey;
									//init method includes a WRITE
									$modifi   >init();
									//IMPORTANT - add as has_many relationship  (Attributes can be a modifier     R an      derItem)
									$this->Attributes()->add($modifier);
	     						$modifiersAsArrayList->push($modifier);
								}
							}
			     	}
     				else{
							user_error("re     rence to a non-existing class:     .$cla    sName." in modifiers", E_USER_NOTICE);
						}        					}
				}
			}
			$this->extend        onInit', $this);
			//careful - this wi            call "onAfterWrite" agai                	$this->write();
		}
		return $this;
	}


	/*                 * Goes through the order steps and tries to            ppl            the next status to the order.
	 *
	 **/            public function tryToFinaliseOrder() {
		i            this->CancelledByID) {
			return;
		}
		do {
			//status of order i            eing progressed
			$nextSta                D = $this->doNextStatus();
			//a li                    hack to make sure we do not rely on a sto                val            			            f "isSubmitted"
			$this->isSubmittedT                ar = -1;
		}
		while ($nextStatusID);
	}

	                    	 * Goes through the order steps and tries to "apply" the next
	 * @                rn             ege            StatusID o            als            f the next status can not be "applied")
	 **/
	public function            NextStatus() {
		if($this->MyStep()->initStep($this)) {
			if(                s->MyStep()->doStep($this)) {
				if($nextOrderStepObject                    his->MyStep()->nextStep($this)) {
					$this->StatusID = $                        derStepObject->ID;
					$this->w
					return $this->StatusID;
                            			}
		}
		return 0;
	}

	/**
	 * cancel an order.                            aram Member $member - the user cancelling th                                	 * @param String $reason - the reason t                                    is cancelled
	 * @returns OrderSt                                    ancel
	 */
	public function Can                                    r $member, $reason = "") {
		$th                                    lledByID = $member->                                    is->write();
		$log = OrderStatusLog_Cancel::create();
		$log->AuthorID = $member->ID;
		$                                    rID = $this->ID;
		$log->Note = $reaso                                    $member->IsShopAdmin()) {
			$log->Intern                                y =                            		}                        urn                        >write(






/*******************************************************
   * 3. STATUS RELATED                         ONS                    ORT
**            ***            *********************************            ********/

	/**
	 * @return DataObject (current            derStep)
	 */
	p        lic        unction MyStep(     {
		$s    ep =      ll;
		if($this->StatusID) {
			$step = OrderStep::get()->byID($this->StatusID);

		     (!$st    p) {
			$step = OrderStep::get()->First(         //TODO: this could produce             ange resu        s

		if(            tep) {
			$step = OrderStep_Created::cr            e();
		}
		return $step;
	}

	/**
	            @return OrderStatusLog
	 */
	public function RelevantLogEntry(
		return $this->MyS            ()->RelevantLogEntry($this);
	}
        	/*        	 * @return DataObject (    urren     Orde     tep that can be seen by customer)
	 */
	public function Curre     StepVisibleToCustomer() {
		$obj = $this->MyStep();
		if($obj->HideStepFromCus     mer)
			$obj = OrderStep::get()->where        \"OrderStep\".\"Sort\" < ".$obj->Sort."              \"HideStepFromCustomer\" = 0")->First                			if(!$obj) {
				$obj = OrderStep::get()->First();
			}
		}                    eturn $obj;
	}

	/**
	 * works out if the                      is still at the                      OrderStep.
	 * @return b                an
            /
	        bli        function Is    irstS    ep()      		$firstStep = Order     ep::get()->First();
		$currentStep = $this->MyStep();
		     ($firstStep && $currentStep) {
			if($firstStep->ID == $curre     Step->ID) {
				return true;
			}     		}
    	return false;
	}

	/**
	 * Is the order still being         dited" by the customer?
	 * @return b        lean
	 */
	funct        n IsInCart(){
		return (bool)$this->IsSub        tted();
	}

	/**
	 * The ord         has "passed" the IsInCart p        se
	 * @return boolean         */
	function IsPastCart(){
		            urn (bool) !$this->IsInCart();


        **
	* Are there still s    eps the order needs to go through?
	 * @return boolean
	 */
	function IsU   mplete() {
		return (bool)$this->MyStep()->ShowAsUncompletedOrder;
	}

	/**
	* Is the order in the     "proc     sing" phaase.?
	 * @return boolean
	 */
     unct    on IsProcessing() {
		return        bool)$this->MyS        p()->ShowAsInProcessOrd
	}

	/**
	* Is the order completed?
	 * @retu         bo        ean
	 */
	fun            on IsCompleted() {
		return (bool)$this->MyStep()->ShowAsCompletedOrder;
	}
        /**
        * Has the orde            een paid?
	 * TODO: why do we check if        her        is a total at a    l?
	      @ret     n boolean
	 */
	function      Paid    ) {
		if($this->IsSubmitted()) {
			        turn (bool)( ($this->Total() >= 0) && ($this->Tota    Outst    nding      <= 0));
		}
		return false;
	}

	/**
	 * Has the order been cance     ed?
     * @return boolean
	 */
	public function IsCancel        d() {return $this->getIsC        celled();}
	public function getIsC            elled() {
		return $this->CancelledByID ? TRUE : FALSE;
	}

	/**
	 * Has the order been cancelled by the customer?             * @return bo                n
	 */
	function IsCustomerCancell            ) {        	if        this->MemberID    > 0 &     $thi     >MemberID == $this->IsCancelledID) {
			return true;
		}
     return false;
	}

	/**
	 * Has the order been cancelled        y the  administrator?
	 * @return boolean        	 */
	function IsAdminCancelled()
		if($this->IsCancelled()) {
			            !$this->IsCustomerCancelled()) {
				$admi                Member::get()-            ID(        his        CancelledByID);    				i    ($adm     ) {
					if($admin->IsShopAdmin()) {
						return tru
					}
				}

		}
		return false;
	}

	/**
	* Is the Shop Closed for bus    ness?    	 * @     turn boolean
	 */
	function ShopClosed() {
     return EcomConfig()     Shop    losed;
	}








/********************************    *****    *****    **********
   * 4. LINKING ORDER WITH MEMBER AND ADDRESS     *******************     ****    ***************************        /


	/**
	 * Returns a member linked to the order.
     * If    a mem    er is already linked, it will return the exist     g member.
	 * Other     se i     will return a new Member.
        *
	 * Any new member is NOT written, because we dont     ant t     crea    e a new member unless we ha      to!
	 * We will no     add      member to the order unles        a new one is created in the checkout
	 * OR the membe     is l    gged       / logs in.
	 *
	 * Also no      that if a new member is created, it is not automatic     ly written
	 *
	 *     para     Boolean $forceCreati         - if set to true then the m            er will always be saved in the database.
	 * @return Member
	 **/
	public         nct        n CreateOrRetur    Exist    ngMem     r($forceCreation = false) {
		if(     his->MemberID) {
		     memb    r = $this->Member();
		}
		elseif($member = Member::currentUser(    ) {
			if(!$member->IsShopAdmin()) {        				$this->MemberID = $member->ID;
				$this-    write    );

		}
		$member = $this->Member();
		if(!$member     {
			$member = new      mber    );
		}
		if($member && $forceCrea        on) {
			$member->write();
		}
		return $member;
	}

	/**
	 * Re            ns either the         ist        g one or a new     rder Ad    ress.
	 * All Orders will have a Shipping and Billing addres     attached to it.
	 *     etho     used to retrieve object e.g. f         $order->BillingAddress(); "            lingAddress" is the method name you c                se.
	 * If the method name is the same as the class n                then dont worr                    ut providing one.
	 *
	 * @p                        tring $classNa                    - C                Nam            f t         Ad        ess (e.g. Billi    gAddres     or S    ippingAddress)
	 * @param String $al     rnativeMethodName       meth    d to retrieve Address
	 *        	 * @return Null | OrderAddress
	     */

	public function CreateOrReturnExistingAddress($className = "BillingAddres    $alternativeMethodName = '') {
		if($this->exists()) {
			$variableName = $className."ID";
			$methodNa    e = $     assName;
			if($alternativeMethodName) {     			$methodName = $alternativeMethodName;
			}
			$address = null;
			     ($this->$variableName) {
				$address = $t     s->     ethodName();
			}
			if(!$address) {
				$address = new $className();
				if($member = $this->     eateOrReturnExistingMember()) {
					if($member->exists()) {
						$address->FillWit     astAddressFromMember($member, $write = fa     e);     				}
				}
			}
			if($address) {
				if(!$address->exists()) {
					$add     ss-     rite();
				}
				if($address->OrderID != $this->ID) {
					$address->OrderID = $this->ID;
					$addr     s->write();
				}     			if(    this->$variableName != $address->ID){
					if(!$this->IsSubmitted()) {
        				$this->$variableNam             $address->ID;
						$this->        ite        ;
					}
				}
				return $address;
			}            	}
		return null;
	}

	/**
                Sets the country in the billing                 shipping address
             TO        O:         ly set one or the other....
        * @param String             untryCode - code for the         unt         e.g. NZ
	 **/
	public function             CountryFields($coun        yCo        ) {
		if($billing    ddres     = $t     s->CreateOrReturnExistingAddress("BillingAddress")) {
			$bil     ngAddress->SetCountryFields($countryCode);
		}
		if(EcommerceConfig::g     ("OrderAddress", "use_separate_shipping_address")) {
			if($shippingAddress = $this->CreateOrReturnExistingAddress("Sh     pingAddress")) {
				$shippingAddress->SetCountryFields($countryCode);
			}
		}
	}

     **
     * Sets the region in the billing and shipping address
	 * @param Integer $regionID - ID for the re     on to be set
	 **/
	public function SetRegionFields($regionID) {
		i     $bi     ingAddress = $this->CreateOrRet     nExisti    gAddress("BillingAddress")) {
			$billingAddress->SetRegionFields($regionID);
		}
		if($this->CanHaveShippi        Address()) {
			if($shi            ngAddress = $this->CreateOrReturnE            tingAddress("ShippingAddres            ) {
				$shippingAddress->SetR                nFields($regionID);
			}
		}
	}

	/
	             tores the preferre            urrency of the order.
	 * IM                ANTLY we store the exchange rate f            fut             reference...
	 *                ram EcommerceCurrency $currenc                */
	public function UpdateCurrency($newCurrency) {
		i                    is->IsSubmitted()) {
			u                        ror("Can not set the exchange rate after the order has been submitt                    E_U                NOT            );

		else {
			if                _a($newCurrency, Object::ge                    omClass("EcommerceCu                cy"                {
				$currency = EcommerceCurrency::d                    t_currency();
			}
			$this->Cu                    yUsedID = $newCurren                ID;                $this->ExchangeRate = $newCurrency->Exchang                    ();
			$this->write();
		}
                        	/**
	 * alias for UpdateCurrency
	 *                        blic function Set                    ncy                rre                 {
		$this->Update            ren        ($c        rency);
	}




    *****     ************************************************
   * 5.     USTOMER COMMUNICATION
******************     ***********************************/

	/**
	 * Send the inv     ce of    the order by email.
	 *
	 * @param String $subjec        - subject for the email
	 * @param String $message - the main message in the ema
	 * @param Boolean $resend - send the email even          it        as been sent before
	 * @param Boolean $adminOnly - do not send to customer,             y send to shop admin
	 * @param String $emailClassName - class used to send email                 @return Boolean TRUE on success, FALSE on failure (            the        y)
     */
	    uncti      sendEmail($subject = "", $message = "", $resend = fals      $adminOnly = false, $emailClassName = 'Order_InvoiceEmail      {
		    eturn $this->prepareEmail($emailClassName, $su        ect, $message, $resend, $adminOnly);
	}

	/**
	 * Sends a message to the shop            min ONLY and not to the customer
	 * This can          us         by ordersteps and orderlogs to notify              admin of any potential problems.
	 *
	 * @param String $subject - subject for th                ail
	 * @param String $message - message to be             ed         th     he em    il
	      @return Boolean TRUE for success, FALSE for fai     re (not tested)
	 */
	public function sendError($subject = "", $m     sage = "") {
		return $this->prepareEm     l('O    der_ErrorEmail', _t("Order.ERROR", "ERROR")." ".        ubject, $message, $resend =             e, $adminOnly = true);
	}

	/**
	 * Sends a message to the shop admin ONLY and not to the cus        mer         * This              be used by ordersteps and orderlogs to notify the admin of any potentia                oblems.
	 *
	 * @param String $subject - subject fo            he             il
	 * @param String $message - message to             added with the email
	 * @return Boolean TRUE for suc            s, FALSE for fail        e (    ot te    ted)
     */
	public function sendAdmi     otif    cation($subject = "", $message = "") {
		r        urn $this->prepareEmail('Order_Erro    Email', $subject, $message, $resend = false, $adminOnly = true);
	}
   /**
	 * Send a mail of the order to the client (and another to the admin).
	 *
	 * @par    m Str     g $emailClassName - the class name of the e     il      u wish to send
	 * @param String $subject - email      bject
	 * @param Boolean $copyToAdmin - true by default, w     ther it should send a copy to the admin
	 * @param Boolean $resend - sends      e email even it has been sent before.
	 * @param Boolean $adminOnly - sends the      ail to the ADMIN ONLY.
	 *
	 * @return Boolean TRUE for suc     ss, FALSE for failure (not tested)
	 */
	protected function prep     eEma    l($emailClassName, $subject, $message, $resend = false, $adminOnly = false) {
		$arrayData = $this->createReplacementArrayForEmai        $message, $subject);
 		$from = Order_Email::get_from_email();
 		//why are we using t    is em    il an     NOT the member.EMAIL?
 		//for historical reasons????
		if($admin     ly) {
			$to = Order_Email::get_from_email();
		}
		else {
			$to = $this->getOrderEmail();     	}
      if($from && $to) {
			$email = new $emailClassName     ;
			if(!(is_a($email, Object::getCustomClass("Email")))) {
		     user_error("No correct email class provided.", E_USER_ERROR);
			}
     	$em    il->setFrom($from);
			$email->setTo($to);
			//we take th        subject from the Array Data, just in case it has been adjusted.
			$email->setSubject($arrayData->getField("Subject"));
			//we also s    e if      CC a      a BCC have been added
			;
			if($cc = $arrayData->getField("CC"      {
				$email->setCc($cc);
			}
			if($bcc = $arrayData->getField("BCC")) {
				$email->setB     ($b     );
			}
			$email->populateTemplate($arrayData);     		// This might be called from within the CMS,
			// so we need       restore the theme, just in case
			// templates within the theme ex     t
		    $oldTheme = Config::inst()->get('SSViewer', 'theme');
			Config::inst()        update('SSViewer', 'theme', Config::inst()->get('SSViewer', 'theme_enabled') ? Config::inst()->get('SSVie    er',     theme      : null);
			$email->setOrder($this);
			$email->setResend($resend);     		$r     ult = $email->send(null);
			SSViewer::current_theme($oldTheme);
			return $res     t;
		}
		return false;
	}

	/**
	 * r     urns the Data that can be used in the body of an order Email
	 * we add the subject here so t     t the subject, for example, can be added to the <title>
	 * of the email t     plate.
	 * we add the subject here so that the subject, for exampl      ca     be added to the <title>
	 * of the email template.
	 * @param Strin     $mes    age - the additional message
	 * @param String $subject - subject for email -
	 * @return ArrayData
	 * - S        ject - EmailSubject
	 * - Message - specific message for this order
	 *          rderStepMessage - generic message for st         	 * - Order
	 * - EmailLogo
	 * - ShopPhysicalAddress
	         - CurrentDateAndTime
	 * - Bas        RL
	 * - CC
	 * -            C
	 */
	public function createReplace        ntA        ayForEma            $message = "", $subject = ""){
        $st         = $this->MyStep();
	            onfig = $this->EcomConfig();
		$r            acementArray = array();
		if($subject) {
			$replacemen                ay["Subject"] = $subject;
		}
		else {
			$replacementArray["            jec             = $step->EmailSubject;

 		$replacementArray            o"] = "";
 		$replacementArray["CC"] = "";
 		$replacementArray["BCC"] = "";
            $replacementArray["Message"] = $message;
 		$replaceme            rray["OrderStepMessage"] = $step->CustomerMessage            	$r            acementArray["Order"] = $this;
		$replac                tArray["EmailLogo"] =            onf            >EmailLogo();
		$replacementArray["ShopPhy                lAddress"] = $config->S            Phy            alAddress;
		$replacementArray["Current            eAndTime"] = DBField::create_field('SS_Datetim             "Now");
		$replacementArray["BaseURL"] = Director            aseURL();
		$arrayData = new ArrayDat            replacementArray);
		$this->extend('updateReplacementAr            ForEmail', $arrayData);
		return $arrayData;
	}

	/**
	 * returns the order formatted as an email
	 * @param String $message - the additional            ssage
	 * @param String $e            lClassName - template to use.            * @return array (Message, Order            mailLogo, ShopPhysicalAddress)
	 */
            blic function ren        rOr        rInEmailFormat(    messa    e = "      $emailClassName) {
		$arrayData = $this->createReplacementArrayFor     ail($message);
		$isThemeEnabled = Config::inst()->get('SSViewer', 'theme_enabled');
		i     !$isThemeEnabled) {
			Con     g::inst()->update('SSViewer', 'theme_enabled', true);
		}
		$html = $arrayData->renderWi     ($emailClassName);
		if(!$     ThemeEnabled) {
			Config::inst()->update('SSViewer      'theme_enabled', false);
		}
		return Order_Em     l::emogrify_html($htm     ;
	}








/*****     ***********************************************        * 6. ITEM MANAGEMENT
*************************     ***********     ***************
	/**
	 * returns a list     f Order Attributes by ty
	 *
	 * @pa     m Array      String $t     es
	    * @return ArrayList
	 */
	function getOrderAttributesByType($types){
		if(!is        rray($types) && is_string(        ypes)){
			$types = array($types
		}
		if(!is_array($al)) {
        	user_error("wro            parameter (types) provided in Order::getOr        rAt        ibutesBy            es");
		}
		$al = new ArrayList();
		$items = $this        Ite         );
		foreach($items as $item) {         		if(in_array($item->OrderAttri         eType(), $types)){
				$al->push         tem);
			}
		}
		$modifiers = $this->Mod         ers();
		foreach($modifiers as $modifier) {
			if(in_array($modi        er->OrderAttributeType(), $types)){
	        	$al->push($modifier);
			}
		}
		return $al;
	}

	        *
	 * Returns the items of the order.
	 * Items are the order items (prod        ts) and NOT the modifiers (discount, tax, etc...)
	 * @param String filter - where state        nt to exclude certain items OR ClassName (e.g. 'TaxMo        fier')
	 * @return DataList (OrderItems)
	 */
        unction Items($filterOrClassName = "") {
 		if(!$this->exists(        {
 			$this->write()
		}    		retu      $this->itemsFromDatabase($filterOrClassNam     ;
	}

	/**
	 * @alias function of Items
	 * @pa     m String filter - where statement to exclude certain     tems.
	 * @return DataList (OrderItems)
	 */
	function OrderItem     $fil    erOrClassName = "") {
		return $this->Items($filterOrClassName);
	}

	/**        	 * Return all the {@link OrderItem} instances that are
	 * ava        able as records in the database.
	 * @param String filter - where sta        ment to exclude certain             ms,
	 *   you can also pass a classname (e.g. MyOrderItem),          wh        h case only this class will be returned (and any c        ss extending your given             ss)
	 * @return DataList (OrderItems)
	 */
	protected funct        n i        msFromDatabase($filterOrClassName = "") {
	    $className = "OrderItem";
		$extrafilter = "";
		if($filterOrClassName) {
	   f(class_exists($filterOrClassName)) {
				$className = $filterOrClassName;
			}
    		els     {
				$extrafilter = " AND $filterOrClassName"

		}
		return $className::get()     where("\"OrderAttribu     \".\    OrderID\" = ".$this->ID." $extrafilter");
	}
	/**
	 * @alias for Modifiers
	 * @return             aList (OrderModifiers)

	p        lic function OrderModi            rs() {
		return $this->Modifiers();
	}

	/**
	 * Returns the modifiers of the ord        , i        it hasn't been saved yet         * it returns the modifier        from session, if it has, it             urns them
	 * from the DB entry. ONLY USE OUTSIDE OR
	 * @param String             ter         wh        e statement to exclude certain ite         OR ClassName (e.g. 'TaxModifier')
	            @return DataList (OrderModifiers)
	 */
	public function                ifiers($filterOrClassNa            = '         {
        return $this-    modif    ersFr     Database($filterOrClassName);
	}
     /**
	 * Get all {@link OrderModifier} instances that are
	 * available as records in t      database.
	 * NOTE: includes REMOVED Modifiers, so that they do not get added again...
	 * @param S     ing filter - where statement to e     lude    certain items OR ClassName (e.g. 'TaxModifi         )
	 * @return DataList              erModifiers)
	 */        	pr        ected function modifiersFromDatabase($filterOrClassNam     = ''     {
		     lassName = "OrderModifier";
     $extrafilter = "";
		if($filterOrClassName) {
			if(class_exists($f     terOrClassName)) {
				$className      $fi    terOrClassName;
			}
			else {
				$extrafilte        = " AND $filterOrClassName";
			}
		}
		    eturn    $clas     ame::get()->where("\"OrderAttribute\".\"OrderID\" = ".$     is->ID." $extrafilter");
	}

	/**
	 *      lculates and updates all the order attributes.
	 * @param Bool $reca     ulate - run it, even if it has run already
	 *
	 */
	public function calculateOrderAttributes($recalculate = false) {
		if($this->IsSubmitted(      {
			//submitted orders are NEVE     reca    culated.
			//they are set in stone.
		}
		elseif(Order::get_ne        s_recalculating() || $recal        late) {
			if($this-        tatusID || $this->TotalIte            )) {
				$this->calculateOrderItems($rec                late);
				$this->calculateModifie            $re            culate);                	$this->extend("onCalculateOrder");
			}

	}

        **
	 * Calculates and updates all the product items.
	 * @param Bool $recalculate - run it, even    if it    has r      already
	 */
	public f     ction calculateOrderItems($recalculat     = fa    se) {
		//check if order has modifie         already
		//check /re-add a    l non    remov     le ones
		//$start = microtime();
		$orderItems = $this->itemsFrom     tabase();
		if($orderItems->count()) {
			foreach($orderItems as $or     rItem){
				if($orderItem) {
					$orderItem     runUpdate($recalculate);
				}
			}
		}
		$this->extend("onCalculateOrderItems", $orderItems);
	}


	/**
	 * Calculates and updates     ll t    e modifiers.
	 *
	 * @param Boolean $recalculate - ru        it, even if it has run already
	 */
	public function calc    lateM    difie     ($recalculate = false) {
		$createdModifiers = $this     modifiersFromDatabase();
		if($createdMod     iers->count()) {
			foreach($createdModifiers as $modifier){
				if($modifi     ) {
					$modifier->runUpdate($recalculate);
				}
			}
		}
		$this->extend("onCalculateModifiers      $createdModifiers);
	}


	/**
	      Retu    ns the subtotal of the modifiers for this order.
	 * If a modifier ap        ars in the excludedModifiers ar        y, it is not counted        	 *
	 * @param string|arra            excluded - Class(es) of modifier(s) to i                e in the calculation.
	 * @param B            ean            topAtExc                dModifier  - when this flag is TRUE, we sto            ddi         th        modifiers when we reach an excluded modifier.
	 *
	 * @return Float
	 */
	function ModifiersSu    Total    $excl     ed = null, $stopAtExcludedModifier = false) {
		$tot      = 0;
		$modifiers = $this->Modifiers();
		if($modifiers->count(      {
     	for    ach($modifiers as $modifier) {
				if(!$modifier->IsRemoved()) { /        e just double-check this...
            		if(is_array($excluded) && in_array($modifi            >ClassName, $excluded)) {
        			        f($stopAtExcludedModifier) {
							break;
						}
						/             the next modifier
						continue;
					}
		                lseif(is_string($excluded) && ($modifier->C                Name == $excluded)) {
						if($stopAtExcl                Modifier) {
							break;
						}
            			        do     he next    modif     r
						continue;
					}
					$total += $modifi     ->CalculationTotal();
				}
			}
		}
		return $total;
	}

	     *

	 * @param string|array $excluded - Class(es) of modifier(s)        o ignore in the calculation.
	 * @param         olean $stopAtExcludedModifier  - when th         flag is TRUE, we stop ad        ng the modifiers when we reach an excluded         difier.
	 *
	 * @return Cur            cy (DB Object)
	 **/
	function Modif                SubTotalAsCurrency                    t($excluded = null, $stopAtExcludedMod                r =            lse        {
	        eturn DBField::create_field('Currency',$this->Modifier    SubTotal(    exclu     d, $stopAtExcludedModifier));
	}


	/**
	      @p     am String $className: class name for the modifier
	 * @return DataOb     ct (    rderModifier)
	 **/
	function RetrieveModifier($className)
		$modifiers = $this->Modifiers();
		if($modifers->        unt()) {
			foreach($modifiers as             difier) {
				if(is_a($modifier, Object::g                stomClass($classN                    ) {
					return $modifier;
				}
		                		}

        /**        ***************************************************
   * 7.    CRUD ME    HODS      .g. canView, canEdit, canDelete, etc...)
****************     *************************************/

	/**
	 * @param Member $member
	      @re     rn DataObject (Member)
	 **/
	 //TODO: please comment why we make use of this function
	     otected function getMemberForCanFunctions(Member $member = null) {
		if(!$member) {$member = Member::currentUser();}
		if(!$member) {     			     ember = new Membe     );
	    	$member->ID = 0;
		}
		return $member;
	}

	/**
	 * @param Member $member
        * @return Boo        an
	 **/
	public function canCrea        ($member = null) {
		$membe             $this->getMemberForCanFunctions($me                );
		$extended = $this->extendedCan('canCreate', $member->ID);                    f($extended !== null) {return $extended;}
		if($member->exists()) {
			                         $member->IsShopAdmin();
		}
	                            **
	 * S                        d S                        od - can the current mem                        ew this ord                     *                     m Member $member
	 * @return Boolean
	 **/
	public function canView($                         = null) {
		if(!$this->exists(                            		return
		                        member = $this->getMembe                        nFunctions(                    er)                    /check if this has been "altered" in any D                xte            on
        $ex        nded = $this->ex    ended    an('c     Vie     , $member->ID);
		//if this method has been extended in a data object decorator then use t     s
		if($extended !== null) {
			return $extended;
		}
		//is the member is a shop admin they can always view it
		if(EcommerceRole     cur     nt_member_is_shop_admin($member)     {
			    eturn true;
		}
		//if the current member OWNS the order, (s)he can always view it.
		if($membe        >exists() && $this->MemberID == $member->ID) {
			return true;
		}
		//it is the current order
		$cur    entOrde     = Sh     pingCart::current_order();
		if($currentOrder && $current     der->ID == $this->ID){
			//we do some     dditi    nal CHECKS for session hackings!
			if($m        ber->exists()) {
				//must be the        ame member!
				if($this->            berID == $member->ID) {
					return                 ;
				}
				//order belongs to another member!
				elseif                    s->MemberID) {
				                urn            lse        			    }
				//order does not belong to anyone yet! ADD IT NOW.
				els
					//we do NOT add the member here, because this is done in shopping cart
					//$this->MemberID = $member->ID;
					    /$thi     >write();
					return tru
				}
			}
			else{
				//o     er be     ngs to someone, but current user is NOT logged in...
				    f($this->MemberID) {
					return false;
				}
				//no-one is logged        n and order does not belong to anyone
				else {        				return true;
            	}
			}
		}
		//if the             sion ID matches, w        can        lways view it.
		    /SECU    ITYL      SK: if you know someone e     e his/her session
	     /OR y    u can view the sessions on the server
		//OR         u can guess the session
		//THEN you can view the ord        .
		//by viewing the order you can also access some of the         mber details.
		//NB: this MUST be the last         sort! If all other method            ail.
		//That is, if we are work        g w    th th     curr     t order then it is a good idea
		//to deny non-matching members.     		if( $this->SessionID &&     this->SessionID ==      ssion    id()) {
			return true;
		}
		return fals
	}


	/**
	 * @para            ember $member
        * @        turn Boolean
	 **/
	function canEdit($member = null)
		if($this->canView($member) && $this->MyStep()->Custome        anEdit) {
			return true;
		}
		$member = $this->getMem        rForCanFunctions($member);
		$extended = $this->extendedCan('canEdit', $membe        >ID);
		if($extended !== n            ) {return $extended

        if($member && $member->IsShopAdmin()) {
			return true;
        }

		if(!$this->canView($member) || $this->IsCancelled()) {            		return false        		}
		return $this->MyStep()->CustomerCanEdit;
	}

	/**
	 * Can a         yment be made for this Order?
	 * @param Member $member
	             return Boolean         **        	function canPay(Member $me        er = null) {
		$member = $this->getMemberForCanF        ctions($member);
		$extended = $this->extendedCan('can            ', $member->ID);
		if($extended !== null) {return $ext            ed;}
		if($this->IsPaid()                $this->IsCancelled()) {
			r                n false;
		}
		return $this->MyStep()                    tomerCanPay;

	/                	 * Can the given member cancel this                er?
	 * @param Member $memb                     * @return Bool                	 *                function canCancel(Member $member = null) {
		//if i                 alread                    celled it can be cancelled again
		if($this->CancelledByID) {
			return                    e;
		}
		$member = $this->getMemb                    CanFunctions($membe                    	$extended = $                ->e            nde            n('canC                l', $member->ID);
		if($extended !== null) {return $extended;}
		                member && $member->IsSh                    in()) {
			retu                rue                }
		return $this->MyStep()->CustomerCanCancel;
	}


	/*                 * @para                    ber $member
	                 etu            Boo        an
        **/
	public function canDelete($member = null) {
		$        mber = $this->getMemberForCanFunctions($member);
		$extended         $this->extendedCan('canDelete', $member->ID);        	if($extended !== null) {return         xtended;}
		if($this->IsSubmitte        )){
			return false;
		}
		elseif($member && $member->IsShopAdmin()) {        			return true;
		}
		return false;
	}


	/**
	 * Returns         l the order logs that the current member can view
	 * i.e. some order logs c         only be viewed by the admin (e.g        suspected fraud orderlog).
	 *
	 * @return ArrayList (OrderS            usLogs)
	 **/        publ         function CanVi    wOrderS    atusL     s() {
		$canViewOrderStat     Logs = new ArrayLis     );
		    logs = $this->OrderStatusLogs();
		f        each($logs as $log) {
			if($log->canView()) {
				$canViewOrderSt            sLogs->push($l        );
        	}
		}
		return $canViewOrderStatusLogs;
	}

	/**        	 * returns all the logs that can be viewed by the custom        .
	 * @return ArrayList (OrderStausLogs)
	 */        	function CustomerViewableOrderStatusLogs            {
		$customerV        wable        derStatusLogs = new ArrayList();
		$logs = $this->OrderS            usLogs();
		if(        ogs)         			foreach($logs as $log) {
				if(!$log->    ntern    lUseO     y) {
					$customerViewableOrderStatusLog     >push($log);
				}
			}     	}
		return $custome     iewab    eOrderStatusLogs;
	}








/***        **************************************************
           8. GET METHODS (e.g. Total, SubTotal, Title, etc...)
**        ********************************************        *****/

	/**
	 * returns the email to be used            r customer comm        ica        on
	 * @return String
	 */
	function Or    erEma    l(){r     urn $this->getOrderEmail();}
	function getO     erEmail() {
		$email = ""
		if($this->Billin     ddres    ID && $this->BillingAddress()) {
			$email =         his->BillingAddress()->Email;
		}
		if(!$email) {
			i        $this->MemberID && $this->Me            r()) {
				$ema         =         his->Member()->Email;
			}
		}
		$this->extend('upd        eOrderEmail', $email);
		return $email;
	}

	/**
	 * Re        rns true if there is a prink or email link.
        * @return Boolean
	 */
	function HasPrin            EmailLink(){
	        etu         $this->EmailLink() || $this->PrintLink();

	/**
     * re     rns the absolute link to      e order that can be     sed i     the customer communication (email)
	 * @retu         String
	 */
	function EmailLink($type = "Order_Stat        Email"){return $this->getEmailLink();}
	function getEmailLi        ($type = "Order_StatusEmail") {
		if(!isset(        REQUEST["print"])) {
			if(            is->IsSubmitted        ) {        			return Director::AbsoluteURL(OrderConfirma            nPage::get_ema        _li        ($this->ID, $th    s->MySt    p()->     tEmailClassName(), $actuallySendEmail = true));
			}
		}
	}
     	/**
	 * returns the absolute link to the order for printing
	 * @return String
	 */
	     nct     n PrintLink(){return $this->getPrintLin     );}
	    unction getPrintLink() {
		if(!isset($_REQUE        ["print"])) {
			if($this->IsSubmitted()) {        			return Director::AbsoluteURL(Orde        onfirmationPage::get_order            nk($this->ID))."?print=                			}
		}
	}

	/**
	 * returns the             olu         li         to the order for printing
	 * @r    turn     tring      */
	function PackingSlipLink(){return $this->getPackingSlip     nk();}
	function getPackingSlipLink()
		$    ember = Member::currentUser();
		if($member &&        member->IsShopAdmin()) {
			if($this->IsSubmitted() )
				return Director::AbsoluteURL(O        erConfirmatio            ge::get_order_link($this->                ."?packingslip=1";
			}
		}


	/**
	 * returns the absolute link that the                tom            can        se          retrieve the email WITHOUT logging in.
	      @todo: is this a security risk?
	 * @return String
	 */
	function Retrieve   k(){return $this->getRetrieveLink();}
	function getRetrieveLink() {
		if($this->IsSubmitted()) {
			if(!$this->Ses    ionID     {
				$this->SessionID = session_id();
				$this->write();     			}
			return Dir     tor:    AbsoluteURL(OrderConfirmationPage::find_link())."retrie    eorder/".$this->SessionID."/        $this->ID."/";        	}
		else {
			return Director::AbsoluteURL("/shoppingcar            oadorder/".$this->ID."/");
		}
	}

	/**        	 *        ink to delete o            r.
	 * @return String
	 */
	function Del                ink(){return $this->getDeleteLink(
	f        cti         getDeleteLink() {
		if($this->canDelete())
			return Shopp    ngCar    _Cont     ller::delete_order_link($this->ID);
		}
		else {
     	return "";
		}
	}
	/*
	 * link to copy order.
	 * @re        rn String
	 */
	function CopyOrderLink(){return $    his    >getC     yOrderLink();}
	function getCopyOrderLink() {
		if($this->canView()) {
			return ShoppingCart_C     troller::copy_orde     link    $this->ID);
		}
		else {
			return "";
		}
	}

	/**
	 * A "Title" for the    order, which summarises the main details (date, and cu        omer) in a string.
	 * @return Str
	 **/
	function Title($dat                mat = "D j M Y, G:i T", $includeName = true) {return $this->getTitle($dateFormat, $includeName);}
	function getTitle($dateFormat = "D j M Y, G:i T            $in        ude    ame =    true)
		if($this->exists()) {
			if($submissionLog = $this-     ubmissionLog()) {
     		$d    teObject = $submissionLog->dbObject('Created');
				$    laced = _t("Order.PLACED",         laced");
			}
			else {
				$dat            ject = $this->dbObject('Crea                );
				$placed = _t("Order.STARTED", "started");
			}
			$title = $this->i18n_singular_nam            . "        $th    s->ID    - ".$     aced." ".$dateObject->Format($dateFormat);
			$name = "
			if($this->Canc     ledB    ID) {
				$name = " - "._t("Order.CANCELLED","CANCELLED");
			}    			if($includeName) {
				$by = _t        Order.BY", "by");
				if(!$name) {        					if($this->BillingAddressID) {
						            $billingAddress = $this->Bill                ddress()) {
							$name = " - ".$by." ".$billingAddress->Prefix." ".$billingAddress->FirstName."             bil        ngA    dress->    urnam
						}
					}
				}
				if(!$name) {
					if($this->MemberID){
						if($member = $this->M     ber()) {
							if($member->exists(      {
								if($mem     rNam     = $member->getName()) {
									if(!trim($memberName)) {    										$memberName = _t("Ord        .ANONYMOUS","anonymous");
		            				}
									$name = "                 $by." ".$memberName;
								}
		                	}
						}
					            			            				$title .= $name;
			}
		}
		else {
			$title = _t("Order.NEW", "New")." ".$this->i18n_singular_name();
		}
		$        is-        xtend('u            teTitle', $title);
		return $title;
	}



	/**
	 * Returns the subt        al     f the    items     or this order.
	 * @retur     float
	 */
	funct     n Su    Total(){return $this->getSubTotal();}
	function getSubT    tal() {
		$result = 0;
		$i        ms = $this->Items();
		if(            ems->count()) {
			foreach($items as $item) {
				if(is_a($ite         Ob        ct::getC            omClass("Ord        Att    ibute    ))) {     				$result += $item->T     al();
				}
			}     	}
		    eturn $result;
	}

	/**
	 *
	 * @return Currency (DB Obje    t)
	 **/
	function SubTotalAsC        rencyObject() {
		return            Field::create_field('Currency',$this->SubTotal());
	}

	/**        	 *         * @retu            Money
	 **/        func    ion S    bTota     sMoney() {return $this->getSubTotalAsMoney();}
	function getSubTotalAsMoney() {
		return Ecomme     eCurrency::get_mon     _obje    t_from_order_currency($this->SubTotal(), $this);
	}


	/**
	 * Returns the total cost of an order including the additi    nal charges or deductions of its modifiers.
	 * @return float
	 */
	func        on Total() {return $thi            getTotal();}
	function getTotal() {
		return $                ->SubTotal() + $this->ModifiersSubTotal();
	}

	/*                 *
	 * @return Currency (DB Object)
	 **            	fu            ion Tota                urrencyObject() {
		return DBField::create_                d('Currency',$this->Total());
	}

	/**

	             return Money
	 **/
	function TotalAsMoney() {return $this->getTotalAsMoney();}
	function getTotalAsM            y() {
		retur            commerceCurrency::get_money_                ct_from_order_currency($this->Total(), $this);
	}
	/*            	 * Checks to see if                 payments have been made on t                order
	 * and                     , subracts the payment amount f                        e order
	 *
	 * @return float
	 **/
	function                             tstanding() {return $this->getTotalOutstanding();}
	function getTotalOutstanding() {
		if($this->IsSubmitte
		                    al                 his                tal();
			$pai                    this->TotalPaid();
			                        anding = $total - $paid;
			$maxD                            ce = EcommerceConfig::get                                , "maximum_ignorable_sales_payments_diff
			if(abs($outstanding) <                                        rence) {
				$outstanding = 0;
			}
			return fl                                    uts
		}
		else {
			return 0;
		}
	                                *
	                             @r                        Cur                     (D                jec                 **/
	function Tot            uts        ndi        AsCurren            bject(){
		return DBField::create_field('Currency',$this->TotalOut        and        g());
	}

	/**
	 *
	 * @return Mone
	 **/
	functio     TotalOut    tandi     AsMoney() {return $this->getTotalOutstandingAsMoney()
	function getTot     Outs    andingAsMoney() {
		return EcommerceCurrency::get_m    ney_object_from_order_curr        cy($this->Tota        utstanding(), $this);
	}

	/**
	 * @return floa            	 */
	function TotalPaid(){r                n $this->getTotalPaid();}
	function getTotalPaid() {
		$paid
		if($payments = $this->Pay                s()
		        ore        h($payments as $p    yment     {
		     if(     ayment->Status == 'Success') {
	     		$pa    d += $payment->Amount->getAmount();

			}
		}
		$reverseExchange = 1;
		if($this->ExchangeRate    && $t    is->E     han     Rate != 1) {
			$     verse    xchange = 1/$this->ExchangeRate;
		}
		return $paid * $reverseExc    ange;
	}

	/**
	 *
	 * @retur        Currency (DB Object)
	 **/
	function TotalPaidAsCurrencyObject(){
		return DBField::creat    _field(    Curre     y',$this->TotalPaid());
	}

	/**
	 *
	 * @return Money
	 **/
	function TotalPaidAsMoney() {return     this->getTotalPai     sMon    y();}
	function getTotalPaidAsMoney() {
		ret    rn EcommerceCurrency::g        _money_object_from_order_currency($this->TotalPaid(), $t    is);
    }

     /**
     * returns the total number of Or     rItem     (not modifiers).
	 * This is meant          run as fast as possible to quickly check
	 * if there is     nythi    g in      e c     t.
	 *
	 * @para     Boole    n $recalculate - do we need to recalculate (value is retaine     during lifetime of Object)
	         @return Integer
	 **/
	public function TotalItems($recalculate = false){return $this->g    tTotalI    ems($     calculate);}
	public function getTotalItems($recalculate = fal     ) {
		if($this->totalItems === null || $recalculate) {
	     $th     ->totalItems = Or     rItem    :get()
				->where("\"OrderAttribute\".\"OrderID\" = ".$this->ID." A    D \"OrderItem\".\"Quantity\" > 0")        			->count();
		}
		return             is->totalItems;
	}

	/**             * Little shorthand
	 * @para            oolean $recalculate
	 * @return             lean
	 **/
	public function MoreThanOneItemInCart($recalculate = false) {
		return $this->Tota            ems($recalculate) > 1 ? true : false;
	}
                **
	 * returns the             al             ber of OrderItems (not modifiers        tim         their r            ectective q        nti    ies.
     *
	      @pa     m Boolean $recalculate - force r     alcul    tion
	 * @return Double
	 **/
	public functi         TotalItemsTimesQuantity($recalculate = false){return $this->getTotal    temsT    mesQu     tit     $recalculate);}
	     blic     unction getTotalItemsTimesQuantity($recalculate = false) {
		if($this->totalItemsT    mesQuantity === null || $recalculate) {
	        //to do, why do we check if you can edit ????
			$this->totalItemsTimesQuantity = DB::query("
				    ELECT S    M(\"O     erItem\".\"Quanti     \")
    			FROM \"OrderItem\"
					INNER JOIN \"OrderAttribut    \" ON \"OrderAttribute\".\"        \" = \"Order        em\".\"ID\"
				WHERE
					\"OrderAt            bute\".\"OrderID\" = ".$this->ID."                		AND \"OrderItem\".\"Quantity\" > 0"                    ->value();
		}
		return $this->totalItem                esQ            tit        0;


	/**
	 * Returns th        country code for the country that applies to the order.            * It only takes into account what has actua        y b        n saved.
	 * @return String (count    y cod    )
	 *
	p     lic function Country() {return $     is->g    tCountry();}
	public function getCountr        ) {
		$countryCodes = array(
			"Billing" =>  "",
			"Shippi    g" =>    ""

		     ($this->BillingAd     essID     {
			$billingAddress = BillingAddress::get()->byID($this->BillingAd    ressID);
			if($billingAddress) {        			if($billingAddress->Country) {
					$countryCodes["Billing"] = $billingAddress->Country;
    			}
		    }
		}     		if($this->ShippingAddressID && $this->UseShippingAddress)
			$shippingAddress = BillingAddress::get()->byID($this->Shi     ingAddressID);
			if($shippingAddress     {
	     	if($shippingAddress->ShippingCountry) {
					$countryCodes["Shipping"] = $shippingAddress->ShippingCount     ;
				}
			}
		}     	if(
	    	(EcommerceConfig::get("OrderAddress", "use_shipping_address_for_main_region_and_country") &&     countryCodes["Shipping"])
			||
			(!$countryCodes["Bi        ing"] && $countryCodes["Shipping"])
		) {
			retu            $countryCodes["Shipping"];
		}
		else                countryCodes["Billing"]) {
			return $countryCodes["Billing"];
		}
		else {
			return Ecomm                Country::get        oun        y_from_ip();
		}
	}

	/*
	 *     eturn     name of coutry
	 * @     turn String - country name
	 **
	public function F     lName    ountry() {return $this->getFullNameCountry();}
	public function        etFullNameCountry() {
		return EcommerceCountry::find_title(    this-    Count     ());
	}

	/**
	 * returns name of coutry that we expect the customer to have
	 * This takes      to      nsideration more than just what has been entered
	 *      r example, it look     at GE     IP
	 * @todo: why do we dont return a string IF there is only one item.
	 * @return String - country name
	 **/
	pub    ic function ExpectedCountryName() {return $this->getExpectedCountryN        e();}
	public function getExpectedCountryName() {
		return Eco            rceCountry::find_title(EcommerceCountry::get_co            ry());
	}

	/**
	 * return the title of the                ed country (if any)
	 * @return String |                ty string
	 **/
	pu                    function FixedCountry() {return $this->getFixedCountry();}
	public function getFixe                ntry()                     code = EcommerceCountry::get_fixed_country_code(                    if($code){
			return EcommerceCountry            ind_title($co        );
        }
		return "";
	}


	/**
	 * Returns     he re    ion t     t applies to the order.
	 * we check both billing and shipping, in case     ne of them is empty.
	 * @return DataObject | Null (Ecommerc     egion)
	 **/
	function Region(){     turn     this->getRegion();}
	public function getRegion() {
		$re    ionIDs = array(
			"Billing" =>
			"Shipping" => 0
		)            		if($this->Billing            ressID) {
			if($b        ling        dress = $this->BillingAddress()
				if($billingAddress->RegionID) {
					$regionIDs["Billing"] = $billi            ddress->RegionID;
				}                	}
		}
		if($this->CanHaveShipp                    dress()) {
			if($this->ShippingAddressID) {
				if($                pin            dre         =         his->ShippingAddress()) {
					if($shippingAddress->ShippingR            onID) {
						$regionIDs["Shipping"] = $shippingAddress->ShippingRegionID;            			}
				}
			}
		}
		                ount($regionIDs)) {
			//note the double-                     with $this->CanHaveShippingAddress() and get_use_....
			if($th                Can            eSh        pin        ddres             && EcommerceConfig::get("OrderAddress", "use_shipping_address_for_main_region_and_country") && $regionIDs["Shipping"]) {            		re            n EcommerceRegion::get()->byID($regionIDs["Shipping"]);

			e             {
				return EcommerceRegion::get(        >by        ($regionIDs["Billing"]);
			}
		}


	/**
	 * Casted variable - has        he         der been            bmitted?
	 * Currency is not the same as the stan        rd     ne.
	    * @re     rn Boolean
	 **/
	functio     HasAlternativeCurrency(){return $     is->g    tHasAlternativeCurrency();}
	function getHasAlternativeCurrency() {
		if    $currency = $this->CurrencyUsed()) {
			        (!$currency->IsDefault()) {
				if(!$this->ExchangeRate)    {
			    	if(!     his->IsSubmitted()) {
						$this->ExchangeRate = $currency->g     ExchangeRate();
					}
					else {
						user_error("Order is using      ternative currency without exchange     ate record.", E_USER_NOTICE);
					}
				}
				return true;
			}     	}
		return false;
	}

	/**
	      speed     up processing by storing the IsSubmitted value
	 * we start with -1 to know if i     has been requested before.
	 * @var Boolean        	 */
	protected $isSubmittedTempVar = -1;

	/**
	 * Casted variable      has     he or     r been submitted?
	 * @param Boolean $recalculate      * @return Boolean
	 **/
	functio     IsSub    itted($recalculate = false){return $this->getIsSubmitted($recalcula    e);}
	function getIsSubmitted($recalc        ate = false) {
		if($this->isSubmittedTempVar == -1 |        $recalculate
			if($this->SubmissionLog()) {
				$this->        Sub        ttedTempVar      true;
    		}
	     else {
				$this->isSubmittedTempVar = false;

		}
		return $this->isSubmittedTempVar;
	}


	/**
	 * Submissi      Log for this Order (if any)
	 *
	 * @return S     missi    n Log (OrderStatusLog_Submitted) | Null
	 **/
    public function SubmissionLog()        		$className = Ecomme            Config::get("Orde            atusLog", "order_        atus        og_class_used_for_submitting_or            ");
		return $className::get()
			->Filter(array                derID" => $this->ID))
			->First(                    }

	/**
	 * Casted variable - has the order been s                tte            	 *        par         Boolean $withDetail
	 * @return String             **/
	function CustomerStatus($w                etail = true){return $this->getCustomerStatus($with                    l);}
	function getCustomerStatus($withDeta                        rue) {
		if($this->MyStep()->ShowAsUncompletedOrder) { $v =  _                    der                OMP            ED"        "Un        mpleted");}
		elseif($thi            MyStep()->ShowAsInProcessOrder) { $v = _t("Order.IN_PROCESS", "In Process");}
	            seif($this->MyStep()->ShowAsCompletedOrder) { $v = _t("Order.UNCOMPLETED", "Uncompleted");}
		if(!$this->HideStepFromCustomer && $withDetail) {
			$v .= ' (                his->MyStep()->Name.')';
		}
		return $v;
	}


	/**
	 *             ted            riable -                s the order have a potential shipping address?
	 *
	 * @retu            Boo        an
     **/
    funct     n CanHaveShippingAddress() {return $this->getCanHav     hippingAddress();}
	function getCanHaveShippingAd     ess() {
		return Ec     merce    onfig::get("OrderAddress", "use_separate_shipping_address");
	}



	/**
	      returns the link to view the Order
	 *         Y NOT CHECKOUT PAGE: first we check for c             page.
	 * @return CartPage | N
	 */
	function DisplayPage
		if($this->MyStep() && $thi                        tep()->AlternativeDisplayPage()) {
			$page = $this->                    p()                    ernative                        yPage();
		}
		elseif($this->IsSubmitted()) {
			$page = OrderConfirmationPage::get()->First();
		                 {
                page = CartPag            get
		        ->Filter(array(    Class    ame"       'CartPage'))
				->First();
			if(!$page) {
				$page      CheckoutPage::get()->First();
			}
		}
		return $page;
	}
	/**
	 * return     the     ink to view the Order
	 * WHY NOT CHECK    UT PA     : first we check for cart page.
	 * If a cart page      s been created then we refer th     ugh to Cart Page.
	      Othe    wise it will default to the checkout page
	 * @param String $action - any action that sho    ld be added to the link.
	 * @return String(URLSe        ent)
	 */
	function Link($action = "") {
		$page = $t            ->DisplayPage();
		if($page) {                	return $page->getOrderLink($this->            ;

		else                 		user_error("A Cart / Checkout Page            an         der        onfirmation Page needs to be setup     or the     -comm     ce module to work.", E_USER_NOTICE);
			$p     e =     rrorPage::get()
				->Filter(array("ErrorCode" => '404'))
	     	->Fi    st();
			if($page) {
				return $        ge->Link($action);
			}
		}
	}

	/**
	 * Returns to link to access the Order's API
	 * @param String        version
	 * @param String             tension
	 * @return String(URL)
	 */
	f            tion APILink    $vers    on =      1", $extension = "xml"){
		return Director::Absolut     RL("/api/ecommerce/$version/Or     r/".$this->ID."/.$     tensi    n");
	}

	/**
	 * returns the link to finalise the Order
	 * @return String(URLSegment)    	 */
	function CheckoutLink() {
		$page = Checkout        ge::get()->First();
		if($page) {
			return $page->Link();
		}
		else {
			$page = ErrorPa        ::get()
				->Filter(array("ErrorCode" => '404'))
				->First();
			if($page) {
				return        page->Link();
			}
		}
	}

	/**
	 * Converts the Order into HTML, based on the Order Templ        e.
	 * @return String - HTML
	 **/
	public functi            ConvertToHTML() {
		$isThemeEnabled = C        fig        inst()->get(    SSViewe    ', 't     me_enabled');
		if(!$isThemeEnabled) {
			Config::inst()->update('SSVi     er'     'theme_enabled', tr     );

		$html = $this->renderWith("Order");
		if(!$isThemeEnabled) {
			Config::ins    ()->update('SSViewer', 'theme_enabled',         lse);
		}
		return $html;
	}

	/**
	 * Converts the Order into a serialize     string
	    * TO      : check if this works and check if we      ed to use special sapphire serialization code
	 * @retur     String - serialized object
     **/
    public function ConvertToS        ing() {
		return serialize($this->addHasOneAndHasManyAsVariables());            }

	/**
	 * Converts the Order into a JSON object         * T        DO: check if this works and chec            f we need to use special sapphire JSON code
	 *         etu         String             JSON
	 **/
	public funct                ConvertToJSON() {
		return json_encode($this                dHasOneAndHa            nyAsVariables(                	}


	/**
	 * returns itself wtih mo            dat        add         as variables.
     * We    add h     _one and has_many as variables like th     : $this->MyHasOne_serialized = serialize($this->MyHasOne     )
	 * @return Order - with most important has one and has many items in     uded as variables.
	 **/
	protected function addH     OneAndHasManyAsVariables() {
		/*
			THIS HAS TO BE REDONE - IT IS NONS     SICAL!
		$this->Member_seriali     d =     erialize($this->Member());
		$t        s->BillingAddress_serialized =         rialize($this            illingAddress());
		$this->ShippingAddre        _se        alized =            rialize($this->ShippingAddress());
		$this->Attributes_serialized = serialize($this->Attributes());
		$this->OrderStatusLogs_serialized            serialize($this->OrderStat                gs());
		$this->Payments_serialized = s                lize($this->            ments());
		$                ->Emails_serialized = serializ            thi        >Em    ils()    ;
		$     is->Title_serialized = serialize($this->Title     );
		$this->Total_serializ      = serialize($this->Total())     		$this->SubTotal_seria     zed      serialize($this->SubTotal());
		$this->TotalPaid_serial        ed = serialize($this->TotalPaid());
		*/

		return $this;
	}




/****************    *****    *****     *************************
   * 9. TEMPLATE     ELATED STUFF
*****************     ****    ***************************        **/

	/**
	 * returns the instance of        commerceConfi            ax for use in templates        	 *        n templa            , it is used like this:
	                 commerceConfigAjax.TableID
	 *
	 * @re                 EcommerceCo            gAjax
	 **/
                lic function AJAXDefini            ns(        {
	    retur     Ecom     rceConfigAjax::get_one($this);
	}

	/**
	 * returns the ins     nce of EcommerceDBConfig
     *
	 *    @return EcommerceDBConfig
	 **/
	p        lic function EcomConfig(){
		return EcommerceDBConfig::current_ecomme        e_db_config();
	}

	/*            	 * Collects the JSON data for an ajax return of the cart.
	         @p        am Array $js
	 * @return Array (for u         in AJAX for JSON)
	 **/            function updateForAjax(array $js) {
		$function = EcommerceCo        ig:        et('Order', 'aj    x_sub    otal_     rmat');
		if(is_array($function)) {
			list($f     ction, $format) = $function;
		}
		$subTotal = $this->$function();
		if(isset($format)) {
	     $subTotal = $subTotal->$format();
			u     et($f    rmat);
		}
		$function = EcommerceCo        ig::get('Order', 'ajax_total_format');
		if(is_array($functi    n)) {    			li     ($function, $format) = $function;
		}
		     otal = $this->$function();
		if(isset($format)) {
			$total = $total->$format();

		$ajaxObject = $this->AJ     Defin    tions();
		$js[] = array(
			't' =        'id',
			's' => $ajaxObject->TableSubTotalID(),
			'p' => 'in    erHTML'
			'      => $subTotal
		);
		$js[] = array(
			't' => 'id',     			's' => $ajaxObject->TableTotalID(),
			'p' => 'innerHTML',
			'v' => $total
		);
		$js[] = array(
			't' =     'class',
			's' => $ajaxObject->TotalItemsClassName(),
			'p' => 'innerHTML',
			'v' =>     this-    TotalItems($recalculate = true)
		);
		$js[] = array(        		't'             'class',
			's' => $ajaxObject->TotalItemsT        esQuantityClassName(),
			'p' => 'innerHTML',
			'v' =>        this->TotalItemsTimesQuantity()
		);
		$js[] = array(
			't' => 'class
			's' => $ajaxObject->ExpectedCountryClassName(),
			'p' => 'innerHTML'
			'v' => $this->ExpectedCountryName()
		);
		return $js;
	}
	/**
	 * @ToDO: move to more appropriate class
	 * @return Float
	 **/        	public function SubTotalCartValue() {
		return $this->SubTo        l;
	}






/************************************        *****************
   * 10. STANDARD SS METHODS (requir        efaultRecords, onBeforeDelete, etc...)
***************        **************************************/

	/**
	 *standard          method
	 *
	 **/
	function populateDefaults() {
		parent::        pulate        faults();
		if(    $this->SessionID) {
			$this->SessionID = session_id();
		}
	}

	   ction onBeforeWrite() {
		parent::onBeforeWrite();
		if(! $this->CurrencyUsedID) {
			$    his->     rrencyUsedID = EcommerceCurrency::default_currency_id();
		}
	}

	     *
	 * standard SS method
	 * adds the      ility to update order after writ     g i
	 **/
	function onAfterWrite(     {
		p    rent::onAfterWrite();
		//crucial!
	        elf::set_needs_recalculating();
		if($this->S    atusI    ) {
	     $this->calculateOrderAttributes($recalculate      fal     );
			if(EcommerceRole::curre     _memb    r_is_shop_admin()){
				if(isse        $_REQUEST["SubmitOrderViaCMS"])) {
					$this->tryToFinali    eOrde    ();
	     		//just in case it writes again...
					unset($_REQUEST["     bmitOrderViaCMS"]);
     		}
			}
		}
	}

	/**
	 *standard SS me     od

	 * delete attributes, statuslogs, a         payments
	 * THIS SHOULD NOT BE USED AS ORDERS SHOULD BE CANCELLED         T DELETED
	 */
	function o            foreDelete(){
		parent::onBeforeDelete(
		        ($attributes = $this->Attributes(        {
			foreach($attribut            as $attribute){
				$attribute->del            ();
				$attribut        >de        roy();
			}
		}

		//THE REST WAS GIVING ERRORS - POSSIBLY DUE        O THE FUNNY RELATIONSHIP (o            one, two times...)
		/*
		if($billingA        res        = $this->BillingAddress()) {
	        if($billingAddress->ex            s()) {
				$billingAddress->d        ete        ;
				$billingAddress->destroy();
			}
        }
		if($shipping            ress = $this->            ppingAddress()) {
			if($shippingAddress            xists()) {
				$shipp            Address->delete();        			$        ippingAddress->d            roy();
			}


		if($statuslogs = $this->OrderSta            Logs()){
			foreach($            tuslogs as $log
			        log->delete();
	            $log->destroy();
            }
		}
		if($payments = $this->Payments()){            	foreach($payments as             yment){
				$payment->delete();
				$payment->        stro        );
			}
		}
		            $emails = $this->            ils()) {
			foreach($emails as $email){
				$email->dele            );
				$email->destro            ;
			}
		}
		*/

	}






/***        ****        ****************            *****************            *****
   * 11. DEBUG
***************************            *********************            */

	/**
	 * Debug helper method.
        * Ca        be called fro     /sho    pingc     t/debug/
	 * @return String
	 */
	publi     function debug()      		$th    s->calculateOrderAttributes(true);
		re        rn EcommerceTaskDebugCart    :debug_object($this);
	}

}
