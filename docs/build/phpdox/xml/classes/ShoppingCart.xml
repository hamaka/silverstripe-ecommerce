<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="ShoppingCart" namespace="" name="ShoppingCart" abstract="false" final="false" start="37" end="987">
  <file path="/var/www/bo.ihtf.us/ecommerce/code/api" file="ShoppingCart.php" realpath="/var/www/bo.ihtf.us/ecommerce/code/api/ShoppingCart.php" size="31532" time="2015-12-31T19:26:36+13:00" unixtime="1451543196" sha1="4c8ab836add340c31ee6e54fa5dbd9ed8cfcd2ee" relative="code/api/ShoppingCart.php"/>
  <docblock>
    <description compact="ShoppingCart - provides a global way to interface with the cart (current order).">This can be used in other code by calling $cart = ShoppingCart::singleton();

The shopping cart can be accessed as an order handler from the back-end
(e.g. when creating an order programmatically), while the accompagnying controller
is used by web-users to manipulate their order.

A bunch of core functions are also stored in the order itself.
Methods and variables are in the shopping cart if they are relevant
only before (and while) the order is placed (e.g. latest update message),
and others are in the order because they are relevant even after the
order has been submitted (e.g. Total Cost).

Key methods:

//get Cart
$myCart = ShoppingCart::singleton();

//get order
$myOrder = ShoppingCart::current_order();

//view order (from another controller)
$this-&gt;redirect(ShoppingCart::current_order()-&gt;Link());

//add item to cart
ShoppingCart::singleton()-&gt;addBuyable($myProduct);</description>
    <authors value=": Nicolaas [at] Sunny Side Up .co.nz"/>
    <package value=": ecommerce"/>
    <sub value="-package: control"/>
    <inspiration value=": Silverstripe Ltd, Jeremy"/>
  </docblock>
  <extends full="Object" namespace="" name="Object" unresolved="true"/>
  <member name="session_variable_names" type="array" default="" visibility="private" static="true" line="45">
    <docblock>
      <description compact="List of names that can be used as session variables.">Also @see ShoppingCart::sessionVariableName</description>
      <var type="object">
        <type full="Array" namespace="" name="Array"/>
      </var>
    </docblock>
  </member>
  <member name="singletoncart" type="{unknown}" default="" constant="null" visibility="private" static="true" line="52">
    <docblock>
      <description compact="This is where we hold the (singleton) Shoppingcart"/>
      <var description="(ShoppingCart)" type="object">
        <type full="Object" namespace="" name="Object"/>
      </var>
    </docblock>
  </member>
  <member name="messages" type="array" default="" visibility="protected" static="false" line="58">
    <docblock>
      <description compact="Feedback message to user (e.g. cart updated, could not delete item, someone in standing behind you)."/>
      <var type="object">
        <type full="Array" namespace="" name="Array"/>
      </var>
    </docblock>
  </member>
  <member name="order" type="{unknown}" default="" constant="null" visibility="protected" static="false" line="64">
    <docblock>
      <description compact="stores a reference to the current order object"/>
      <var type="object">
        <type full="Object" namespace="" name="Object"/>
      </var>
    </docblock>
  </member>
  <member name="requireSavedOrder" type="boolean" default="false" visibility="protected" static="false" line="70">
    <docblock>
      <description compact="This variable is set to YES when we actually need an order (i.e. write it)"/>
      <var type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </var>
    </docblock>
  </member>
  <method name="singleton" start="76" end="81" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Allows access to the cart from anywhere in code."/>
      <return description="Object" type="object">
        <type full="ShoppingCart" namespace="" name="ShoppingCart"/>
      </return>
    </docblock>
  </method>
  <method name="current_order" start="87" end="89" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Allows access to the current order from anywhere in the code.."/>
      <return description="Object" type="object">
        <type full="ShoppingCart" namespace="" name="ShoppingCart"/>
      </return>
    </docblock>
  </method>
  <method name="currentOrder" start="99" end="227" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets or creates the current order.">Based on the session ONLY!
IMPORTANT FUNCTION!</description>
      <todo value="- does this need to be public????"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="recurseCount" byreference="false" type="integer" default="0"/>
    <inline>
      <comment value="just in case ..." line="221"/>
    </inline>
  </method>
  <method name="Link" start="233" end="238" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Allows access to the current order from anywhere in the code.."/>
      <return description="Object" type="object">
        <type full="ShoppingCart" namespace="" name="ShoppingCart"/>
      </return>
    </docblock>
  </method>
  <method name="addBuyable" start="249" end="281" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds any number of items to the cart.">Returns the order item on succes OR false on failure.</description>
      <param description="- the buyable (generally a product) being added to the cart" type="object" variable="$buyable">
        <type full="DataObject" namespace="" name="DataObject"/>
      </param>
      <param description="- number of items add." type="object" variable="$quantity">
        <type full="Float" namespace="" name="Float"/>
      </param>
      <param description="- array of parameters to target a specific order item. eg: group=1, length=5" type="object" variable="$parameters">if you make it a form, it will save the form into the orderitem<type full="Mixed" namespace="" name="Mixed"/></param>
      <return description="| DataObject (OrderItem)" type="object">
        <type full="false" namespace="" name="false"/>
      </return>
    </docblock>
    <parameter name="buyable" byreference="false" type="object">
      <type full="BuyableModel" namespace="" name="BuyableModel"/>
    </parameter>
    <parameter name="quantity" byreference="false" type="integer" default="1"/>
    <parameter name="parameters" byreference="false" type="array" default=""/>
  </method>
  <method name="setQuantity" start="290" end="303" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets quantity for an item in the cart."/>
      <param description="- the buyable (generally a product) being added to the cart" type="object" variable="$buyable">
        <type full="DataObject" namespace="" name="DataObject"/>
      </param>
      <param description="- number of items add." type="object" variable="$quantity">
        <type full="Float" namespace="" name="Float"/>
      </param>
      <param description="- array of parameters to target a specific order item. eg: group=1, length=5" type="object" variable="$parameters">
        <type full="Array" namespace="" name="Array"/>
      </param>
      <return description="| DataObject (OrderItem)" type="object">
        <type full="false" namespace="" name="false"/>
      </return>
    </docblock>
    <parameter name="buyable" byreference="false" type="object">
      <type full="BuyableModel" namespace="" name="BuyableModel"/>
    </parameter>
    <parameter name="quantity" byreference="false" type="{unknown}"/>
    <parameter name="parameters" byreference="false" type="array" default=""/>
  </method>
  <method name="decrementBuyable" start="312" end="334" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Removes any number of items from the cart."/>
      <param description="- the buyable (generally a product) being added to the cart" type="object" variable="$buyable">
        <type full="DataObject" namespace="" name="DataObject"/>
      </param>
      <param description="- number of items add." type="object" variable="$quantity">
        <type full="Float" namespace="" name="Float"/>
      </param>
      <param description="- array of parameters to target a specific order item. eg: group=1, length=5" type="object" variable="$parameters">
        <type full="Array" namespace="" name="Array"/>
      </param>
      <return description="| DataObject (OrderItem)" type="object">
        <type full="false" namespace="" name="false"/>
      </return>
    </docblock>
    <parameter name="buyable" byreference="false" type="object">
      <type full="BuyableModel" namespace="" name="BuyableModel"/>
    </parameter>
    <parameter name="quantity" byreference="false" type="integer" default="1"/>
    <parameter name="parameters" byreference="false" type="array" default=""/>
  </method>
  <method name="deleteBuyable" start="342" end="355" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Delete item from the cart."/>
      <param description="- the buyable (generally a product) being added to the cart" type="object" variable="$buyable">
        <type full="OrderItem" namespace="" name="OrderItem"/>
      </param>
      <param description="- array of parameters to target a specific order item. eg: group=1, length=5" type="object" variable="$parameters">
        <type full="Array" namespace="" name="Array"/>
      </param>
      <return description="| item - successfully removed" type="boolean"/>
    </docblock>
    <parameter name="buyable" byreference="false" type="object">
      <type full="BuyableModel" namespace="" name="BuyableModel"/>
    </parameter>
    <parameter name="parameters" byreference="false" type="array" default=""/>
  </method>
  <method name="prepareOrderItem" start="365" end="388" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Checks and prepares variables for a quantity change (add, edit, remove) for an Order Item."/>
      <param description="- the buyable (generally a product) being added to the cart" type="object" variable="$buyable">
        <type full="DataObject" namespace="" name="DataObject"/>
      </param>
      <param description="- number of items add." type="object" variable="$quantity">
        <type full="Float" namespace="" name="Float"/>
      </param>
      <param description="- if false, the Order Item gets created if it does not exist - if TRUE the order item is searched for and an error shows if there is no Order item." type="object" variable="$mustBeExistingItems">
        <type full="Boolean" namespace="" name="Boolean"/>
      </param>
      <param description="- array of parameters to target a specific order item. eg: group=1, length=5" type="object" variable="$parameters">
        <type full="Array" namespace="" name="Array"/>
      </param>
      <return description="| DataObject ($orderItem)" type="boolean"/>
    </docblock>
    <parameter name="buyable" byreference="false" type="object">
      <type full="BuyableModel" namespace="" name="BuyableModel"/>
    </parameter>
    <parameter name="parameters" byreference="false" type="array" default=""/>
    <parameter name="mustBeExistingItem" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="prepareQuantity" start="396" end="403" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <todo value=": what does this method do???"/>
      <return type="object">
        <type full="Integer" namespace="" name="Integer"/>
      </return>
      <param type="object" variable="($buyable)">
        <type full="DataObject" namespace="" name="DataObject"/>
      </param>
      <param type="object" variable="$quantity">
        <type full="Float" namespace="" name="Float"/>
      </param>
    </docblock>
    <parameter name="buyable" byreference="false" type="object">
      <type full="BuyableModel" namespace="" name="BuyableModel"/>
    </parameter>
    <parameter name="quantity" byreference="false" type="{unknown}"/>
  </method>
  <method name="findOrMakeItem" start="413" end="438" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Helper function for making / retrieving order items.">we do not need things like "canPurchase" here, because that is with the "addBuyable" method.
NOTE: does not write!</description>
      <param type="object" variable="$buyable">
        <type full="DataObject" namespace="" name="DataObject"/>
      </param>
      <param type="object" variable="$parameters">
        <type full="Array" namespace="" name="Array"/>
      </param>
      <return type="object">
        <type full="OrderItem" namespace="" name="OrderItem"/>
      </return>
    </docblock>
    <parameter name="buyable" byreference="false" type="object">
      <type full="BuyableModel" namespace="" name="BuyableModel"/>
    </parameter>
    <parameter name="parameters" byreference="false" type="array" default=""/>
  </method>
  <method name="submit" start="446" end="453" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="submit the order so that it is no longer available in the cart but will continue its journey through the order steps."/>
      <return type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </return>
    </docblock>
    <inline>
      <comment value="little hack to clear static memory" line="449"/>
      <comment value="we cleanup the old orders here so that we immediately know if there is a problem." line="451"/>
    </inline>
  </method>
  <method name="save" start="458" end="462" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </return>
    </docblock>
  </method>
  <method name="clear" start="469" end="493" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Clears the cart contents completely by removing the orderID from session, and thus creating a new cart on next request."/>
      <return type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </return>
    </docblock>
    <inline>
      <comment value="we keep this here so that a flush can be added..." line="470"/>
    </inline>
  </method>
  <method name="reset" start="498" end="500" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="alias for clear"/>
    </docblock>
  </method>
  <method name="removeModifier" start="510" end="526" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Removes a modifier from the cart It does not actually remove it, but it just sets it as &quot;removed&quot;, to avoid that it is being added again."/>
      <param type="object" variable="$modifier">
        <type full="OrderModifier" namespace="" name="OrderModifier"/>
      </param>
      <return type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </return>
    </docblock>
    <parameter name="modifier" byreference="false" type="object">
      <type full="OrderModifier" namespace="" name="OrderModifier"/>
    </parameter>
  </method>
  <method name="addModifier" start="533" end="548" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Removes a modifier from the cart"/>
      <param type="object" variable="OrderModifier">
        <type full="Int/" namespace="" name="Int/"/>
      </param>
      <return type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </return>
    </docblock>
    <parameter name="modifier" byreference="false" type="{unknown}"/>
  </method>
  <method name="loadOrder" start="555" end="584" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets an order as the current order."/>
      <param description="| Order $order" type="object">
        <type full="Int" namespace="" name="Int"/>
      </param>
      <return type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </return>
    </docblock>
    <parameter name="order" byreference="false" type="{unknown}"/>
    <inline>
      <todo value="how to handle existing order" line="556"/>
      <todo value="permission check - does this belong to another member? ...or should permission be assumed already?" line="557"/>
    </inline>
  </method>
  <method name="copyOrder" start="591" end="637" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="NOTE: tried to copy part to the Order Class - but that was not much of a go-er."/>
      <param description="| Order $order" type="object">
        <type full="Int" namespace="" name="Int"/>
      </param>
      <return type="object">
        <type full="DataObject(Order)" namespace="" name="DataObject(Order)"/>
      </return>
    </docblock>
    <parameter name="oldOrder" byreference="false" type="{unknown}"/>
  </method>
  <method name="setCountry" start="644" end="654" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="sets country in order so that modifiers can be recalculated, etc..."/>
      <param description="- $countryCode" type="object">
        <type full="String" namespace="" name="String"/>
      </param>
      <return type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </return>
    </docblock>
    <parameter name="countryCode" byreference="false" type="{unknown}"/>
  </method>
  <method name="setRegion" start="661" end="671" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="sets region in order so that modifiers can be recalculated, etc..."/>
      <param description="| String - $regionID you can use the ID or the code." type="object">
        <type full="Integer" namespace="" name="Integer"/>
      </param>
      <return type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </return>
    </docblock>
    <parameter name="regionID" byreference="false" type="{unknown}"/>
  </method>
  <method name="setCurrency" start="678" end="697" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="sets the display currency for the cart."/>
      <param type="object" variable="$currencyCode">
        <type full="String" namespace="" name="String"/>
      </param>
      <return type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </return>
    </docblock>
    <parameter name="currencyCode" byreference="false" type="{unknown}"/>
  </method>
  <method name="debug" start="702" end="793" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Produces a debug of the shopping cart."/>
    </docblock>
  </method>
  <method name="addMessage" start="801" end="814" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Stores a message that can later be returned via ajax or to $form-&gt;sessionMessage();"/>
      <param description="the message, which could be a notification of successful action, or reason for failure" variable="$message" type="object">
        <type full="-" namespace="" name="-"/>
      </param>
      <param description="please use good, bad, warning" variable="$type" type="object">
        <type full="-" namespace="" name="-"/>
      </param>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="status" byreference="false" type="string" default="'good'"/>
    <inline>
      <comment value="clean status for the lazy programmer" line="802"/>
      <todo value="remove the awkward replace" line="803"/>
    </inline>
  </method>
  <method name="getExistingItem" start="828" end="842" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Gets an existing order item based on buyable and passed parameters"/>
      <param type="object" variable="$buyable">
        <type full="DataObject" namespace="" name="DataObject"/>
      </param>
      <param type="object" variable="$parameters">
        <type full="Array" namespace="" name="Array"/>
      </param>
      <return description="or null" type="object">
        <type full="OrderItem" namespace="" name="OrderItem"/>
      </return>
    </docblock>
    <parameter name="buyable" byreference="false" type="object">
      <type full="BuyableModel" namespace="" name="BuyableModel"/>
    </parameter>
    <parameter name="parameters" byreference="false" type="array" default=""/>
  </method>
  <method name="cleanParameters" start="849" end="861" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Removes parameters that aren't in the default array, merges with default parameters, and converts raw2SQL."/>
      <param type="object" variable="$parameters">
        <type full="Array" namespace="" name="Array"/>
      </param>
      <return description="array" type="object">
        <type full="cleaned" namespace="" name="cleaned"/>
      </return>
    </docblock>
    <parameter name="params" byreference="false" type="array" default=""/>
    <inline>
      <comment value="clone array" line="851"/>
    </inline>
  </method>
  <method name="parametersToSQL" start="867" end="881" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <param type="object" variable="$parameters">Converts parameter array to SQL query filter<type full="Array" namespace="" name="Array"/></param>
    </docblock>
    <parameter name="parameters" byreference="false" type="array" default=""/>
  </method>
  <method name="getMessages" start="892" end="903" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieves all good, bad, and ugly messages that have been produced during the current request."/>
      <return description="of messages" type="array"/>
    </docblock>
    <inline>
      <comment value="get old messages" line="894"/>
      <comment value="clear old messages" line="896"/>
      <comment value="set to form????" line="898"/>
    </inline>
  </method>
  <method name="StoreMessagesInSession" start="909" end="912" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Saves current messages in session for retrieving them later."/>
      <return description="of messages" type="array"/>
    </docblock>
  </method>
  <method name="setMessageAndReturn" start="931" end="963" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="This method is used to return data after an ajax call was made.">When a asynchronious request is made to the shopping cart (ajax),
then you will first action the request and then use this function
to return some values.

It can also be used without ajax, in wich case it will redirects back
to the last page.

Note that you can set the ajax response class in the configuration file.</description>
      <param type="object" variable="$message">
        <type full="String" namespace="" name="String"/>
      </param>
      <param type="object" variable="$status">
        <type full="String" namespace="" name="String"/>
      </param>
      <param type="object" variable="$form">
        <type full="Form" namespace="" name="Form"/>
      </param>
      <returns value="String (JSON)"/>
    </docblock>
    <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="status" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="form" byreference="false" type="{unknown}" default="" constant="null">
      <type full="Form" namespace="" name="Form"/>
    </parameter>
    <inline>
      <todo value="handle passing back multiple messages" line="935"/>
    </inline>
  </method>
  <method name="EcomConfig" start="969" end="971" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <return type="object">
        <type full="EcommerceDBConfig" namespace="" name="EcommerceDBConfig"/>
      </return>
    </docblock>
  </method>
  <method name="sessionVariableName" start="979" end="985" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Return the name of the session variable that should be used."/>
      <param type="object" variable="$name">
        <type full="String" namespace="" name="String"/>
      </param>
      <return type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="string" default="&quot;&quot;"/>
  </method>
</class>
